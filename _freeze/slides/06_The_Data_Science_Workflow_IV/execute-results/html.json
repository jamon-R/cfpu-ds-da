{
  "hash": "4352317ed2ada38acc7c885b1ec397e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Science and Data Analytics\"\nsubtitle: \"The Data Science Workflow IV -- Communicate\"\nauthor: \"Julian Amon, PhD\"\ndate: \"May 28, 2025\"\ndate-format: long\ninstitute: Charlotte Fresenius PrivatuniversitÃ¤t\nfooter: \"Data Science and Data Analytics -- The Data Science Workflow IV\"\nformat:\n  revealjs:\n    theme:\n      - default\n      - slides.scss\n    width: 1350\n    height: 900\n    slide-number: true\n    logo: img/UOS_Logo.jpg\n    fig-width: 14\n    controls: true\n    embed-resources: true\nhighlight-style: arrow\nexecute: \n  warning: true\n  echo: true\n  code-line-numbers: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Introduction to Quarto\n\n\n\n\n\n\n\n## The Data Science workflow -- Communicate\n\n![](img/data-science-cycle.007.png){fig-align=\"center\"}\n\n## Putting it all together...\n\n-   The final product of a data science project is often a **report**, which can take multiple different forms:\n    -   a scientific **publication** (typically PDF)\n    -   a **technical report** for your company (typically Word, Pages or PDF)\n    -   a **presentation** (typically PowerPoint, Keynote or PDF)\n    -   a **blog post** (typically HTML)\n    -   ...\n-   Depending on the audience, such reports may include\n    -   **text** to describe project, methods and findings\n    -   **figures and tables** to describe and visualize data and results\n    -   **code** you ran to get to these results\n\n## Putting it all together...\n\n-   Now, imagine...\n    -   you have to **re-run your entire analysis** with a new data set because the initial one was wrong in some way.\n    -   you realize that a mistake was made and the code needs to be fixed and re-run entirely.\n    -   a colleague from another department wants to **reproduce** the results from your report using your data and code.\n-   Situations like these are very commonplace for a data scientist. It is for this reason that we need a framework that integrates text, figures, tables, code and data to create **reproducible reports**.\n-   Such a framework is given by **Quarto**.\n\n## What is Quarto?\n\n-   **Quarto** is a format for so-called **literate programming documents**. Literate programming weaves textual documentation and comments together with code, producing a document that is optimized for human understanding.\n-   The basic workflow is very simple:\n    -   Create a **Quarto file** (ends in `.qmd`)\n    -   In this file, specify the output format (PDF, HTML, Word, ...) as well as metadata about the document, such as a title, the name of the author, date, etc.\n    -   Add your code and text.\n    -   **Compile** the document into the final report. In this process, Quarto runs all your code, creates all the plots and tables and integrates everything with your text into the specified output format.\n-   Quarto is **very powerful**. The rest of this course gives a basic introduction.\n\n## Our first Quarto document\n\nIn RStudio, we can create a new Quarto file by clicking on `File > New File > Quarto Document`. Give the document a fitting title and author and select `PDF` as the output format (for now). RStudio then creates a template `.qmd` file:\n\n![](img/first_quarto.png){fig-align=\"center\"}\n\n## Elements of a Quarto document -- YAML header\n\n-   At the very top of the document -- demarcated by three dashes (`---`) on either end -- is the so-called **YAML header**:\n\n    ```{.yaml}\n    title: \"My first Quarto document\"\n    author: \"Julian Amon\"\n    format: pdf\n    ```\n\n-   YAML is a widely used language mainly used for providing configuration data.\n\n-   With Quarto, it is used to define **metadata** about the document, such as (in this case) `title`, `author` and (output) `format`.\n\n-   We can define many other things in the header than what is included in the template, e.g. `theme`, `fontcolor` or `fig-width`. A complete list of available YAML fields for PDF documents can be found [here](https://quarto.org/docs/reference/formats/pdf.html).\n\n## Elements of a Quarto document -- Code chunks\n\n-   To run code inside a Quarto document, you need to put it inside a so-called **code chunk**. Such a code consists of four elements:\n\n    -   **Three back ticks** and the programming language in curly braces to start the chunk (since we only use R, for us, this is always \\`\\`\\``{r}`).\n    -   **Chunk options** (optional): these are key-value pairs that can be used for customizing code chunks, each on their own line starting with `#|`.\n    -   The actual code.\n    -   **Three back ticks** again to signify the end of the code chunk.\n\n-   The template contains an example of a code chunks with options:\n\n    ```{{r}}\n    #| echo: false\n\n    2 * 2\n    ```\n\n## Elements of a Quarto document -- Code chunks\n\n-   The full list of code options is available [here](https://yihui.org/knitr/options/). The most important ones are:\n    -   `echo: false` prevents code, but not the results from appearing in the finished file. Use this when writing reports aimed at people who do not want to see the underlying R code.\n    -   `eval: false` prevents code from being run. This is useful for displaying example code, or for disabling a large block of code without commenting each line.\n    -   `include: false` runs the code, but doesnâ€™t show the code or results in the final document. Use this for setup code (like loading libraries) that you do not want cluttering your report.\n    -   `message: false` or `warning: false` prevents messages or warnings from appearing in the finished file.\n-   By default, all of these code chunk options are `true`.\n\n## Elements of a Quarto document -- Code chunks\n\n-   As you work more with Quarto, you will discover that some of the default chunk options do not fit your needs and you want to change them.\n\n-   For example, consider a situation where you are writing a report for a non-technical audience. To hide the underlying R code, we would have to set `echo: false` in each and every chunk.\n\n-   To avoid this, we can set the preferred options **globally** in the YAML header under `execute`. So, to achieve global code suppression, we would set:\n\n    ```{.yaml}\n    title: \"My first Quarto document\"\n    author: \"Julian Amon\"\n    execute:\n      echo: false\n    format: pdf\n    ```\n\n-   These **global** code chunk options can be overridden locally in any chunk.\n\n## Elements of a Quarto document -- Markdown text\n\n-   Finally, besides the YAML header and code chunks, the last (main) type of content we see in a Quarto file is **text** mixed with simple formatting instructions. This text is written in a so-called **Markdown format**.\n-   Instead of using buttons like in Word or Pages to format our text, **Markdown** lets us add **headings, bold or italic text, lists, links and more**, just by typing special characters. Consider the following examples:\n    -   `# Heading`, `## Subheading` and `### Subsubheading` for section titles.\n\n    -   `*italic*` for text *in italics*.\n\n    -   `**bold**` for text **in boldface**.\n\n    -   `- Item 1`\n\n        `- Item 2` for bullet point lists.\n\n    -   `[Link text](https://quarto.org)` for clickable links.\n\n## Combining all three elements in Quarto\n\n-   Let's use our knowledge about the three elements of a Quarto document (YAML header, code chunks and Markdown text) to adapt the template that RStudio created for us in the following ways:\n    -   Add a `date` field to the header and set it (literally) to `today`.\n    -   Change the title of the document to `Penguins in Antarctica`.\n    -   Change the level 2 header `## Quarto` to `## Data`.\n    -   Immediately after this header, add a code chunk that only loads the libraries `palmerpenguins` and `ggplot2`. For this chunk, set `include: false`.\n    -   After that chunk, write a simple sentence in Markdown that points out that we use data from the `palmerpenguins` package. Make sure to include a link to the website of the package, which can be found [here](https://allisonhorst.github.io/palmerpenguins/).\n    -   Finally, in another chunk, create a scatter plot of `flipper_length_mm` length against `body_mass_g`. Remove all other content from the template.\n\n## Combining all three elements in Quarto\n\nAfter you did all that, your Quarto document should look something like this:\n\n![](img/first_quarto2.png){fig-align=\"center\"}\n\n## Compiling our first Quarto report\n\n-   To **compile** (or **render**) your final report from this Quarto file, first **save the file** into an appropriate location on your computer.\n\n-   Then, click on the ![](img/render.png) button at the top of the screen. This will run all the code, and **combine text, code and results** in the desired output format:\n\n    ![](img/penguins_report.png){fig-align=\"center\" width=\"30%\"}\n\n## The visual editor\n\n-   We have successfully created our first **Quarto report**! ðŸŽ‰\n-   While writing text in Markdown format is in principle easy to read and write, it still requires learning new syntax. For this reason, RStudio offers the **visual editor** to assist you in editing your Quarto document:\n    -   The idea of the visual editor is to provide a **graphical user interface (GUI)** that is more similar to working with, say, Microsoft Word.\n    -   For example, you can use the buttons on the menu bar for **text formatting** or to insert lists, images, tables, cross-references, etc. You can also **paste an image** from your clipboard directly into the visual editor and much more...\n    -   While the visual editor displays your content with formatting, under the hood, it saves your content in plain Markdown. You can switch back and forth between **visual and source editor** to view and edit your content.\n\n## The visual editor\n\n-   Let's use the visual editor to make the following **changes** to our Quarto document on the penguins from the `palmerpenguins` package:\n    -   Write a sentence that explains that the data comprises three penguin species and list them with **bullet points** (Adelie, Chinstrap and Gentoo).\n    -   At the end of each bullet point, insert a penguin emoji (`Insert > Special Characters > Insert Emoji...`).\n    -   Below these bullet points, insert the cartoon displaying all three species from the package [website](https://allisonhorst.github.io/palmerpenguins/). Make sure that it is aligned in the centre.\n-   At the end, switch back to the source editor and see how your changes were implemented in Markdown. Finally, render your report again to see how the changes affect the final output.\n\n## Implementing changes in the visual editor\n\nWith all these changes, the visual editor should show something like this:\n\n![](img/first_quarto3.png){fig-align=\"center\"}\n\n## Cross-references and citations in Quarto\n\n-   To write a scientific report or paper, two features are almost always required:\n    -   **Cross references**: referring to a figure or a table by a `label`, so that you can reference it in your text using its number (e.g., \"see Figure 1\").\n    -   **Citations**: citing academic literature using a `.bib`-file, so that references are properly formatted and listed automatically at the end of the document.\n-   Fortunately, the visual editor makes both of these things very easy. To create a cross reference for a plot produced by a code chunk, we need to do two things:\n    -   Give the chunk a `label` starting with `fig-`, e.g. `fig-penguins1`.\n    -   Provide a caption for the plot in the `fig-cap` code chunk option, e.g. \"*A scatter plot of flipper length against body mass*\".\n-   Once, we have done this, we can then refer to this figure in the text with `@fig-penguins1` or insert the cross reference via `Insert > Cross Reference`.\n\n## Cross-references in Quarto\n\n![](img/cross_reference.png){fig-align=\"center\"}\n\n-   In this way, it is ensured that wherever we move the chunk or its reference in the report, the reference will always go the correct plot.\n-   We can create such references also for **inserted images**, of course:\n    -   Simply click on the three dots next to the inserted image and go to the `Attributes` tab.\n    -   Give the image a label starting with `#fig-`, e.g. `#fig-cartoon`\n    -   You can then refer to the image by `@fig-cartoon` (see next slide).\n\n## Cross-references in Quarto\n\n![](img/cross_reference2.png){.absolute top=\"200\" left=\"20\"}\n\n## Citations in Quarto\n\n-   Let's say we wanted to cite the paper in which the penguin data was originally published. It can be found [here](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081).\n-   To insert a citation in the visual editor, simply select `Insert > Citation` at the place where you want the citation to be. RStudio then gives you several options. The easiest way is to paste the **DOI** of the paper:\n    \n    ![](img/citation.png){fig-align=\"center\" width=\"50%\"}\n\n## Citations in Quarto\n\nAt the next rendering, Quarto will create a `.bib` file holding the added references, **add the citation** at the place where you have inserted it and **append a list of references** to the end of your document.\n\n::: {layout-ncol=2}\n\n![](img/citation_added.png)\n\n![](img/citation_added2.png)\n\n:::\n\n## Quarto formats\n\n-   One of the many great things about Quarto is that it offers many different **output formats** in which to render our report.\n-   Switching between output formats is very easy: simply change the `format` in the YAML header.\n-   For **reports**, the most common formats are:\n    -   `pdf`: what we were using for our penguin report so far.\n    -   `html`: an HTML document with more flexibility than a PDF (e.g. animations).\n    -   `docx`: a Microsoft Word document.\n-   For **presentations**, the most common formats are:\n    -   `revealjs`: an HTML-based presentation format allowing for interactivity, animations, dynamic content and much more.\n    -   `pptx`: a Microsoft PowerPoint presentation.\n\n## Quarto formats -- Switching to HTML\n\n-   As you may have noticed, the penguin emojis we included into our Quarto document were not rendered into the output PDF. This is because the PDF output format cannot handle emojis.\n-   To remedy that, let's switch to `html` in the YAML header:\n\n    ```{.yaml}\n    title: \"Penguins in Antarctica\"\n    author: \"Julian Amon\"\n    date: today\n    format: html\n    bibliography: references.bib\n    ```\n\n-   When we now click on ![](img/render.png), the report will be generated as an **HTML** and not as a **PDF**. Note how it changes in appearance slightly and now correctly displays the emojis we added earlier.\n\n## Quarto formats -- Switching to HTML\n\n\n\n```{=html}\n\n<iframe width=\"1300\" height=\"800\" src=\"06_penguins_quarto.html\" title=\"Penguin report as HTML\"></iframe>\n\n```\n\n\n\n## Quarto formats -- Presentation with revealjs\n\n-   As indicated before, Quarto allows us not only to generate **reports**, but also **presentations**.\n-   While in principle, we could also simply switch the `format` to one of the presentation formats (e.g. `revealjs` or `pptx`) to generate a presentation, there are some special things to consider when doing that.\n-   Presentations work by dividing your content into **slides**. To do this with Quarto, the different level **headings** receive a special meaning when the output format is `revealjs` or `pptx`:\n    -   Second level headings (starting with `##`) demarcate slides, i.e. a new second level heading will create a new slide.\n    -   First level headings (starting with `#`) indicate the beginning of a new section with a **section title slide**.\n\n## Quarto formats -- Presentation with revealjs\n\nA really basic presentation for the penguin example could look like this:\n\n![](img/presentation_quarto.png){fig-align=\"center\"}\n\n## Quarto formats -- Presentation with revealjs\n\nWhen rendered, this looks like this:\n\n\n\n```{=html}\n<iframe width=\"1350\" height=\"700\" src=\"06_penguins_presentation.html\" class=\"slide-deck\"></iframe>\n```\n\n\n\n## Presentations with Quarto\n\n-   Quarto has an incredible set of features for presentations. In fact, all of the slides for this course were created with Quarto!\n-   Some of these features include:\n    -   Code highlighting and animations:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-line-numbers=\"1|2\"}\n    ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + \n      geom_point()\n    ```\n    :::\n\n\n    -   Slide transitions\n    -   Tabsets (as in tabs splitting plot and code, for example)\n    -   Interactive slides (see example on the next slide)\n    -   and countless more...\n-   Basically, whatever you want to do, **Quarto makes it possible**! Thus, we cannot even remotely cover everything, features are best explored by yourself!\n    \n\n## Presentations with Quarto\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-30e4409849e39179307f\" style=\"width:1344px;height:720px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-30e4409849e39179307f\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[48.22326,16.50951,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"We are here\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[48.22326,48.22326],\"lng\":[16.50951,16.50951]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## Further references for Quarto\n\n-   The main resource is the [Quarto website](https://quarto.org/). There you can find:\n    -   Basic tutorials for [getting started](https://quarto.org/docs/get-started/).\n    -   Specific [guides](https://quarto.org/docs/guide/) on topics like presentations, computations, books, tools, authoring, websites, publishing, etc.\n    -   A [reference](https://quarto.org/docs/reference/) that explains all options for the possible output formats.\n    -   A [demo presentation](https://quarto.org/docs/presentations/revealjs/) made with `revealjs` that showcases some more of the cool features that Quarto offers for presentations.\n-   A [Markdown tutorial](https://www.markdowntutorial.com/) for practice with elementary Markdown.\n-   A [Markdown table generator](https://www.tablesgenerator.com/markdown_tables) that gives you the option to create Markdown tables in a very convenient way (including importing from Excel or similar).\n-   The R for Data Science book, which is freely available [online](https://r4ds.hadley.nz/). In its last two chapters, it also contains a great introduction to Quarto.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}