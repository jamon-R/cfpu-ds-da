{
  "hash": "4c5ed3ec2ea0082eaac33b43648a9e93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises IV\"\nsubtitle: \"Data Science and Data Analytics\"\nauthor: \"Julian Amon, PhD\"\ndate: \"April 30, 2025\"\ndate-format: long\nformat: html\nhighlight-style: arrow\nexecute: \n  warning: false\n  echo: true\n  eval: true\n  fig-height: 4\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# The Data Science Workflow -- Model\n\n\n\n\n\n\n\n\n\n1.  The `ISLR2` package contains the `Boston` data set, which records `medv` (median house value) for 506 suburbs of Boston. We will seek to predict `medv` using 12 predictors such as `rm` (average number of rooms per house), `age` (proportion of owner-occupied units built prior to 1940) and `lstat` (percent of households with low socio-economic status).\n    a. Install and load the `ISLR2` package. Investigate the description of all variables in the `Boston` data set via `?Boston`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"ISLR2\")\n    library(ISLR2)\n    ?Boston\n    ```\n    :::\n\n\n\n    b. We will first do a random train-test split. Using the function `sample`, randomly choose 405 (i.e. approximately 80%) of the observations and assign them to a new `data.frame` called `train`. Assign all others to a `data.frame` called `test`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ISLR2)\n    n <- nrow(Boston)\n    n_train <- 405\n    train_ind <- sample(n, n_train)\n    \n    train <- Boston[train_ind, ]\n    test <- Boston[-train_ind, ]\n    ```\n    :::\n\n\n\n    c. Using the training data set, estimate a simple linear regression model with `medv` as the response and `lstat` as the predictor. Inspect the created `lm` object using `summary` and interpret regression coefficients, their statistical significance and the $R^2$ statistic. Furthermore determine a 95%-confidence interval for the slope coefficient $\\beta_1$.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    m1 <- lm(medv ~ lstat, data = train)\n    summary(m1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Call:\n    lm(formula = medv ~ lstat, data = train)\n    \n    Residuals:\n        Min      1Q  Median      3Q     Max \n    -15.065  -3.883  -1.405   1.721  24.609 \n    \n    Coefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n    (Intercept)  34.4851     0.6170   55.89   <2e-16 ***\n    lstat        -0.9543     0.0427  -22.35   <2e-16 ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    \n    Residual standard error: 6.148 on 403 degrees of freedom\n    Multiple R-squared:  0.5534,\tAdjusted R-squared:  0.5523 \n    F-statistic: 499.4 on 1 and 403 DF,  p-value: < 2.2e-16\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Note: exact values will be different for every run due to the random selection of\n    # train and test data.\n    # Interpretation of regression coefficients:\n    # slope: for an increase in the percentage of households with low socio-economic status\n    # by one percentage point, the median house value drops on average around 954.30$.\n    # intercept: in a suburb with no households of low socio-economic status, the median\n    # house value is around 34,485$.\n    # Both intercept and slope are significantly different from zero at all usual significance\n    # levels (e.g. also 0.1%).\n    \n    # Interpretation of R^2:\n    # A model containing only lstat as an explanatory variable is able to explain around\n    # 55.3% of the variance in median house values between suburbs.\n    \n    confint(m1, \"lstat\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n              2.5 %     97.5 %\n    lstat -1.038243 -0.8703427\n    ```\n    \n    \n    :::\n    :::\n\n\n\n    d. Visualize the simple linear regression model you just fitted on the training data using a scatter plot. Hint: simply use `geom_smooth` with the method equal to `lm` and `se` set to `FALSE` to add the regression line into the scatter plot. Does the linear fit appear appropriate for the data at hand?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ggplot2)\n    ggplot(train, aes(x = lstat, y = medv)) +\n      geom_point() +\n      geom_smooth(method=\"lm\", se = FALSE) +\n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-5-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # For higher values of lstat, the relationship with medv seems to flatten\n    # out, which indicates that a linear fit might not be appropriate to\n    # model this relationship.\n    ```\n    :::\n\n\n\n    e. Now, estimate a new model that uses the logarithm of `lstat` as an explanatory variable. Inspect its $R^2$ and compare to the one of the simple model that is linear in `lstat`. Visualize the corresponding regression line in another scatter plot. Hint: for the visualization of the non-linear regression line, use `geom_function`. This requires you to specify a function to be drawn into the scatter plot, for which you can use `predict`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    m2 <- lm(medv ~ log(lstat), data = train)\n    summary(m2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Call:\n    lm(formula = medv ~ log(lstat), data = train)\n    \n    Residuals:\n         Min       1Q   Median       3Q      Max \n    -14.3012  -3.3930  -0.5836   1.9879  26.1718 \n    \n    Coefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n    (Intercept)  51.9673     1.0507   49.46   <2e-16 ***\n    log(lstat)  -12.4816     0.4312  -28.94   <2e-16 ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    \n    Residual standard error: 5.243 on 403 degrees of freedom\n    Multiple R-squared:  0.6752,\tAdjusted R-squared:  0.6744 \n    F-statistic: 837.8 on 1 and 403 DF,  p-value: < 2.2e-16\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # With this model, approximately 67.5% of the variance in the median house values\n    # can be explained, which is considerably higher than the 55.3% of the model before.\n    # This indicates that the log fit is indeed more suitable here.\n    \n    ggplot(train, aes(x = lstat, y = medv)) + \n      geom_point() + \n      geom_function(fun = function(x) predict(m2, newdata = data.frame(lstat = x)),\n                    color = \"blue\", linewidth = 1) + \n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-6-1.png){width=672}\n    :::\n    :::\n\n\n\n    f. We now want to compare the performance of different linear regression models using 10-fold cross validation. For this, first assign each **training** observation randomly to a fold between 1 and 10. Next, using these folds, determine the test MSE for each of the following linear regression models.\n        - M1: `medv ~ lstat`\n        - M2: `medv ~ log(lstat)`\n        - M3: `medv ~ log(lstat) + crim`\n        - M4: `medv ~ log(lstat) + crim + dis`\n        - M5: `medv ~ log(lstat) + dis + rm`\n        - M6: `medv ~ log(lstat) + dis + ptratio`\n        - M7: `medv ~ lstat + dis + ptratio + crim + nox`\n        - M8: `medv ~ log(lstat) + dis + ptratio + crim + nox`\n    \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    K <- 10\n    train$fold <- sample(rep(1:K, length.out = n_train))\n    mses <- matrix(NA, K, 8)\n    colnames(mses) <- sprintf(\"M%d\", 1:8)\n    \n    for(k in 1:K){\n      m1 <- lm(medv ~ lstat, data = subset(train, fold != k))\n      m2 <- lm(medv ~ log(lstat), data = subset(train, fold != k))\n      m3 <- lm(medv ~ log(lstat) + crim, data = subset(train, fold != k))\n      m4 <- lm(medv ~ log(lstat) + crim + dis, data = subset(train, fold != k))\n      m5 <- lm(medv ~ log(lstat) + dis + rm, data = subset(train, fold != k))\n      m6 <- lm(medv ~ log(lstat) + dis + ptratio, data = subset(train, fold != k))\n      m7 <- lm(medv ~ lstat + dis + ptratio + crim + nox, data = subset(train, fold != k))\n      m8 <- lm(medv ~ log(lstat) + dis + ptratio + crim + nox, data = subset(train, fold != k))\n      \n      predsm1 <- predict(m1, newdata = subset(train, fold == k))\n      predsm2 <- predict(m2, newdata = subset(train, fold == k))\n      predsm3 <- predict(m3, newdata = subset(train, fold == k))\n      predsm4 <- predict(m4, newdata = subset(train, fold == k))\n      predsm5 <- predict(m5, newdata = subset(train, fold == k))\n      predsm6 <- predict(m6, newdata = subset(train, fold == k))\n      predsm7 <- predict(m7, newdata = subset(train, fold == k))\n      predsm8 <- predict(m8, newdata = subset(train, fold == k))\n      \n      mses[k, 1] <- mean((predsm1 - train$medv[train$fold == k])^2)\n      mses[k, 2] <- mean((predsm2 - train$medv[train$fold == k])^2)\n      mses[k, 3] <- mean((predsm3 - train$medv[train$fold == k])^2)\n      mses[k, 4] <- mean((predsm4 - train$medv[train$fold == k])^2)\n      mses[k, 5] <- mean((predsm5 - train$medv[train$fold == k])^2)\n      mses[k, 6] <- mean((predsm6 - train$medv[train$fold == k])^2)\n      mses[k, 7] <- mean((predsm7 - train$medv[train$fold == k])^2)\n      mses[k, 8] <- mean((predsm8 - train$medv[train$fold == k])^2)\n    }\n    colMeans(mses)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          M1       M2       M3       M4       M5       M6       M7       M8 \n    38.18925 27.75549 27.40817 24.42848 23.38412 22.49007 29.82197 21.32557 \n    ```\n    \n    \n    :::\n    :::\n\n\n\n    g. Which of the models investigated in f. gives the lowest test MSE? Fit the corresponding model to the entire training data and investigate the model more deeply using `summary`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    which.min(colMeans(mses))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    M8 \n     8 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Clearly, model M8 is the best. So we fit it to the entire training data:\n    m8_full <- lm(medv ~ log(lstat) + dis + ptratio + crim + nox, data = train)\n    summary(m8_full)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Call:\n    lm(formula = medv ~ log(lstat) + dis + ptratio + crim + nox, \n        data = train)\n    \n    Residuals:\n         Min       1Q   Median       3Q      Max \n    -13.6082  -2.7435  -0.3968   1.9661  25.5635 \n    \n    Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n    (Intercept)  78.95769    3.11192  25.373  < 2e-16 ***\n    log(lstat)  -11.63807    0.50507 -23.043  < 2e-16 ***\n    dis          -1.37921    0.16825  -8.197 3.39e-15 ***\n    ptratio      -0.91311    0.11961  -7.634 1.70e-13 ***\n    crim         -0.08108    0.02848  -2.847 0.004646 ** \n    nox         -11.85103    3.35019  -3.537 0.000452 ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    \n    Residual standard error: 4.564 on 399 degrees of freedom\n    Multiple R-squared:  0.7563,\tAdjusted R-squared:  0.7533 \n    F-statistic: 247.7 on 5 and 399 DF,  p-value: < 2.2e-16\n    ```\n    \n    \n    :::\n    :::\n\n\n\n    h. Using your cross-validation setup from f., compare the test MSE performance of the best-performing linear regression model now to the performance of KNN regression models that uses the same variables, i.e. `lstat`, `dis`, `ptratio`, `crim` and `nox`. Let $K$ vary between 2 and 10 and only compare the best-performing KNN approach to model M8. Is the non-parametric approach able to outperform the parametric one? \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(FNN)\n    n_neighbours <- 2:10 # number of neighbours considered\n    mses_knn <- matrix(NA, K, length(n_neighbours))\n    colnames(mses_knn) <- sprintf(\"K = %d\", n_neighbours)\n    \n    for(k in 1:K){\n      preds <- lapply(n_neighbours, function(x) knn.reg(train = subset(train, fold != k,\n                                                                       c(12, 8, 11, 1, 5)),\n                                                        test = subset(train, fold == k,\n                                                                      c(12, 8, 11, 1, 5)),\n                                                        y = train$medv[train$fold != k],\n                                                        k = x)$pred)\n      mses_knn[k, ] <- colMeans((do.call(cbind, preds) - train$medv[train$fold == k])^2)\n    }\n    round(colMeans(mses_knn), 2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     K = 2  K = 3  K = 4  K = 5  K = 6  K = 7  K = 8  K = 9 K = 10 \n     22.06  22.39  22.26  21.31  22.06  21.73  21.63  21.98  21.75 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # The best-performing KNN regression model has K = 5. This achieves a test MSE of\n    # 21.31, which virtually identical to the performance of M8, which had 21.33.\n    # Hence, when using only the 5 predictors under investigation, there is no major\n    # difference in performance between linear regression and KNN regression.\n    ```\n    :::\n\n\n\n    i. Using all variables available in the data set, can you find an even better model? Fit your model, the model M8 and the KNN regression model with $K = 5$ from before on the entire `train` data set. Using these fits, compare the performance of the three models on the initial hold-out `test` data set from b. Which of the three approaches has the lowest MSE on that data set?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # After investigating some more linear models in the context of cross validation,\n    # the following model appeared particularly promising:\n    new_m <- lm(medv ~ log(lstat) + log(dis) + ptratio + crim + nox + rm + tax + rad,\n                data = train)\n    m8 <- lm(medv ~ log(lstat) + dis + ptratio + crim + nox, data = train)\n    knn <- knn.reg(train = train[, c(12, 8, 11, 1, 5)],\n                   test = test[, c(12, 8, 11, 1, 5)],\n                   y = train$medv,\n                   k = 5)\n    \n    # Predict the test response with the three models:\n    new_m_pred <- predict(new_m, newdata = test)\n    m8_pred <- predict(m8, newdata = test)\n    knn_pred <- knn$pred\n    \n    # Compute MSEs:\n    new_m_mse <- mean((new_m_pred - test$medv)^2)\n    m8_mse <- mean((m8_pred - test$medv)^2)\n    knn_mse <- mean((knn_pred - test$medv)^2)\n    \n    # Display MSEs:\n    new_m_mse\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 19.12033\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    m8_mse\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 26.08365\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    knn_mse\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 21.34268\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Clearly, the model new_m delivers the lowest MSE on the test set out of the 3.\n    ```\n    :::\n\n\n\n    j. Now, fit a regression tree that uses predictors `lstat`, `dis`, `ptratio`, `crim`, `nox`, `rm`, `tax` and `rad` to the entire training data. Make sure to set the complexity parameter `cp` to zero in the fitting process. Visualize the resulting tree using corresponding functionality from the `rpart.plot` package.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(rpart)\n    library(rpart.plot)\n    rt <- rpart(medv ~ lstat + dis + ptratio + crim + nox + rm + tax + rad, data = train,\n                control = list(cp = 0))\n    rpart.plot(rt)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-11-1.png){width=672}\n    :::\n    :::\n\n\n\n    k. Using the created `rpart` object, determine the optimal complexity parameter `cp` and create an optimally pruned tree. Finally, use both the unpruned and the optimally pruned tree to predict the response in the initial hold-out `test` data set from b. How do their MSEs compare to the models investigated in i.? Hint: Prediction with decision trees from `rpart` works just like it does for linear regression, so that you can use the `predict` function.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Graphic analysis (run rsq.rpart(rt)) shows that a reasonable number of splits\n    # is 9 or 14 (subjective judgement required). Going for 14 splits, the corresponding\n    # cp parameter is 0.00371291, so we use that to prune the tree:\n    rt_pruned <- prune(rt, cp = 0.00371291)\n    \n    # Prediction on the test data:\n    rt_pred <- predict(rt, newdata = test)\n    rt_pruned_pred <- predict(rt_pruned, newdata = test)\n    \n    # Compute MSEs:\n    rt_mse <- mean((rt_pred - test$medv)^2)\n    rt_pruned_mse <- mean((rt_pruned_pred - test$medv)^2)\n    \n    # Display MSEs:\n    rt_mse\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 22.19599\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    rt_pruned_mse\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 22.58178\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # In this case, pruning did not improve performance. Both models are worse\n    # than the best model from i.\n    ```\n    :::\n\n\n\n\n2.  The `ISLR2` package also contains the `Default` data set, which contains information on ten thousand credit card customers. More specifically, the `data.frame` holds the following four variables: `default` (a factor with levels `No` and `Yes` indicating whether the customer defaulted on their debt), `student` (a factor indicating whether the customer is a student), `balance` (average outstanding balance at the end of the month), `income` (income of the customer in USD).\n    a. Start by appropriately visualizing the relationship between `default` (as the response) and each of the other three variables (as the predictors). Also create a scatter plot of `balance` against `income`, where the default cases are highlighted via colour and shape.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ggplot2)\n    \n    # Default and balance: parallel violin plots\n    ggplot(Default, aes(x = default, y = balance, fill = default)) + \n      geom_violin() + \n      guides(fill = \"none\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-13-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Default and income: parallel violin plots\n    ggplot(Default, aes(x = default, y = income, fill = default)) + \n      geom_violin() + \n      guides(fill = \"none\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-13-2.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Default and student: normalized stacked bar charts\n    def_by_student <- as.data.frame(with(Default, table(default, student)))\n    ggplot(def_by_student, aes(x = student, y = Freq, fill = default)) + \n      geom_bar(stat = \"identity\", position = \"fill\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-13-3.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Scatter plot of balance and income with default indicated by colour:\n    ggplot(Default, aes(x = balance, y = income, colour = default, shape = default)) + \n      geom_point(size = 0.8) + \n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-13-4.png){width=672}\n    :::\n    :::\n\n\n\n    b. Since the data set is quite big ($n = 10000$), we can afford to again set some observations aside as a test set for final evaluation. Using the function `sample`, randomly assign 90% of the observations to a new `data.frame` called `train` and assign all others to a `data.frame` called `test`.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    n <- nrow(Default)\n    train_ind <- sample(n, floor(0.9*n))\n    \n    train <- Default[train_ind, ]\n    test <- Default[-train_ind, ]\n    ```\n    :::\n\n\n\n    c. Write a function called `binary_class_metrics` that takes two `factor` arguments `y_pred` and `y_true`, both with two levels. The first represents the predicted classes and the second represents the true classes. The function is then supposed to return a named vector holding the `accuracy`, `recall`, `precision` and `f1` score of the binary classification of `y_true` using `y_pred`. Test your function for the case where the predictions are `1,1,1,0,0,0` and the truth is `1,1,0,1,1,0`. Hint: first compute the confusion matrix by using the function `table` and then compute the four metrics from that table.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    binary_class_metrics <- function(y_pred, y_true){\n      # Check that both variables are factors of the same length\n      n <- length(y_pred)\n      stopifnot(is.factor(y_pred),\n                is.factor(y_true),\n                length(y_true) == n)\n      # Check that levels are identical and that there are only 2 levels\n      stopifnot(all(levels(y_pred) == levels(y_true)),\n                length(levels(y_pred)) == 2)\n      \n      confusion_matrix <- table(y_pred, y_true)\n      accuracy <- sum(diag(confusion_matrix))/n\n      recall <- confusion_matrix[2,2] / sum(confusion_matrix[, 2])\n      precision <- confusion_matrix[2,2] / sum(confusion_matrix[2, ])\n      f1 <- 2*recall*precision/(recall + precision)\n      return(c(accuracy = accuracy, recall = recall, precision = precision, f1 = f1))\n    }\n    \n    binary_class_metrics(factor(c(1,1,1,0,0,0)), factor(c(1,1,0,1,1,0)))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     accuracy    recall precision        f1 \n    0.5000000 0.5000000 0.6666667 0.5714286 \n    ```\n    \n    \n    :::\n    :::\n\n\n\n    d. On the entire training data, estimate a logistic regression model for the `default` variable, using the other three variables as predictors. Inspect the model and interpret the coefficients. Which of them are significantly different from zero at the 5% significance level?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    log_reg <- glm(default ~ student + balance + income, data = train, family = binomial())\n    summary(log_reg)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Call:\n    glm(formula = default ~ student + balance + income, family = binomial(), \n        data = train)\n    \n    Coefficients:\n                  Estimate Std. Error z value Pr(>|z|)    \n    (Intercept) -1.083e+01  5.216e-01 -20.772  < 2e-16 ***\n    studentYes  -7.168e-01  2.522e-01  -2.842  0.00448 ** \n    balance      5.740e-03  2.472e-04  23.220  < 2e-16 ***\n    income       1.883e-06  8.679e-06   0.217  0.82824    \n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    \n    (Dispersion parameter for binomial family taken to be 1)\n    \n        Null deviance: 2576.5  on 8999  degrees of freedom\n    Residual deviance: 1391.5  on 8996  degrees of freedom\n    AIC: 1399.5\n    \n    Number of Fisher Scoring iterations: 8\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Interpretation:\n    # Ceteris paribus, the log odds for default are around 0.7168 lower on average\n    # for a student than a non-student.\n    # Ceteris paribus, for every additional one hundred USD in average outstanding\n    # balance, the log odds for default increases by around 0.5740 on average.\n    # Ceteris paribus, for every additional one thousand USD in income, the log\n    # odds for default increases by around 0.001883 on average.\n    \n    # Significance:\n    # At the 5% level, only the student dummy and the balance variable are significant.\n    ```\n    :::\n\n\n\n    e. Employing your function `binary_class_metrics` from earlier, investigate the **training set** performance of using the logistic regression model from d. as a classifier. Interpret the values of accuracy, recall and precision. Hint: with the `fitted` function, you can get the estimated default probabilities from your `glm` object. Be careful to set the factor levels to `No` and `Yes` to comply with the `default` `factor` in the training data.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    log_reg_preds_train <- factor(ifelse(fitted(log_reg) > 0.5, \"Yes\", \"No\"))\n    log_reg_perf_train <- binary_class_metrics(log_reg_preds_train, train$default)\n    log_reg_perf_train\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     accuracy    recall precision        f1 \n    0.9743333 0.3219178 0.7401575 0.4486874 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Interpretation accuracy: 97.4% of the training observations were correctly classified.\n    # Interpretation recall: 32.2% of the true default cases were correctly identified in\n    # the training data.\n    # Interpretation precision: When the logistic regression predicted default in the\n    # training data, it was correct 74.0% of the time.\n    ```\n    :::\n\n\n\n    f. In the `Default` data set, we have one categorical predictor, namely whether the customer is a student or not. While logistic regression was easily able to handle that, this is more difficult for KNN classification, as one must decide how to measure distance in a feature space that combines categorical and numerical features. As we have a lot of data, we will follow a simple approach: fitting a separate KNN classifier for students and non-students, both with the same value for $K$. Use 10-fold cross validation on the training data to find the value for $K$ that maximizes the F1 score. Hint: in every iteration over the 10 folds, fit and predict the students and non-students separately using the two numeric features as predictors. Remember to scale the numeric features in every iteration.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    K <- 10\n    train$fold <- sample(rep(1:K, length.out = nrow(train)))\n    \n    n_neighbours <- 2:20\n    for(nn in n_neighbours){\n      knn_colname <- sprintf(\"class_preds_KNN%d\", nn)\n      train[[knn_colname]] <- factor(NA, levels = c(\"No\", \"Yes\"))\n      for(k in 1:K){\n        X_train_students <- subset(train, fold != k & student == \"Yes\", 3:4)\n        X_train_students_scaled <- scale(X_train_students)\n        y_train_students <- train$default[train$fold != k & train$student == \"Yes\"]\n        X_test_students <- subset(train, fold == k & student == \"Yes\", 3:4)\n        X_test_students_scaled <- scale(X_test_students)\n        \n        X_train_nonstudents <- subset(train, fold != k & student == \"No\", 3:4)\n        X_train_nonstudents_scaled <- scale(X_train_nonstudents)\n        y_train_nonstudents <- train$default[train$fold != k & train$student == \"No\"]\n        X_test_nonstudents <- subset(train, fold == k & student == \"No\", 3:4)\n        X_test_nonstudents_scaled <- scale(X_test_nonstudents)\n        \n        preds_students <- knn(train = X_train_students_scaled,\n                              test = X_test_students_scaled, cl = y_train_students, k = nn)\n        \n        preds_nonstudents <- knn(train = X_train_nonstudents_scaled,\n                                 test = X_test_nonstudents_scaled,\n                                 cl = y_train_nonstudents, k = nn)\n        train[train$fold == k & train$student == \"Yes\", knn_colname] <- preds_students\n        train[train$fold == k & train$student == \"No\", knn_colname] <- preds_nonstudents\n      }\n    }\n    knn_performance <- sapply(6:24, function(i) binary_class_metrics(train[,i], train[,1]))\n    K_opt <- 9\n    ```\n    :::\n\n\n\n    g. Next, fit a classification tree for `default` using the other three variables as predictors on the entire training data. Make sure to set the complexity parameter `cp` to zero in the fitting process. Visualize the resulting tree using corresponding functionality from the `rpart.plot` package.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ct <- rpart(default ~ student + balance + income, data = train, control = list(cp = 0))\n    rpart.plot(ct)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-19-1.png){width=672}\n    :::\n    :::\n\n\n\n    h. Using the fitted classification tree from g., determine the optimal complexity parameter `cp` and fit and visualize the optimally pruned classification tree.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Graphic analysis (run rsq.rpart(ct)) shows that a reasonable number of splits is 5.\n    # The corresponding cp parameter is 0.0049505, so we use that\n    # to prune the tree:\n    ct_pruned <- prune(ct, cp = 0.0049505)\n    rpart.plot(ct_pruned)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-20-1.png){width=672}\n    :::\n    :::\n\n\n\n    i. Finally, use the logistic regression model from d., the combined KNN classifier with optimal $K$ from f., the full classification tree from g. and the pruned classification tree from h. to predict the test observations in the initial hold-out sample from b. Feed the predictions of each into your function `binary_class_metrics` to evaluate their test set performances. Beyond just the metrics, consider the business implications of the different types of errors each model makes:\n        - False Positive (Predicting default when the customer will not): What are the potential costs to the credit card company?\n        - False Negative (Predicting no default when the customer will default): What are the potential costs to the credit card company?\n        - Based on these costs and the performance metrics, which model do you think the credit card company might prefer and why? Present the performance metrics in a table and follow it with your discussion.\n\n\n\n    \n    ```{.r .cell-code}\n    log_reg_preds <- factor(ifelse(predict(log_reg, newdata = test, type = \"response\") > 0.5,\n                            \"Yes\", \"No\"))\n    \n    knn_preds <- factor(rep(NA, nrow(test)), levels = c(\"No\", \"Yes\"))\n    X_train_students_scaled <- scale(train[train$student == \"Yes\", 3:4])\n    X_train_nonstudents_scaled <- scale(train[train$student == \"No\", 3:4])\n    y_train_students <- train$default[train$student == \"Yes\"]\n    y_train_nonstudents <- train$default[train$student == \"No\"]\n    X_test_students_scaled <- scale(test[test$student == \"Yes\", 3:4])\n    X_test_nonstudents_scaled <- scale(test[test$student == \"No\", 3:4])\n    knn_preds[test$student == \"Yes\"] <- knn(train = X_train_students_scaled,\n                                            test = X_test_students_scaled,\n                                            cl = y_train_students, k = K_opt)\n    knn_preds[test$student == \"No\"] <- knn(train = X_train_nonstudents_scaled,\n                                           test = X_test_nonstudents_scaled,\n                                           cl = y_train_nonstudents, k = K_opt)\n    ct_preds <- predict(ct, newdata = test, type = \"class\")\n    ct_pruned_preds <- predict(ct_pruned, newdata = test, type = \"class\")\n    \n    log_reg_perf <- binary_class_metrics(log_reg_preds, test$default)\n    knn_perf <- binary_class_metrics(knn_preds, test$default)\n    ct_perf <- binary_class_metrics(ct_preds, test$default)\n    ct_pruned_perf <- binary_class_metrics(ct_pruned_preds, test$default)\n    knitr::kable(cbind(data.frame(Classifier = c(\"Logistic regression\",\n                                                 \"KNN\", \"CT Full\", \"CT Pruned\")),\n                       rbind(log_reg_perf, knn_perf, ct_perf, ct_pruned_perf)),\n                 row.names = FALSE)\n    ```\n    \n    \n    \n    |Classifier          | accuracy|    recall| precision|        f1|\n    |:-------------------|--------:|---------:|---------:|---------:|\n    |Logistic regression |    0.963| 0.2439024| 0.6250000| 0.3508772|\n    |KNN                 |    0.961| 0.1951220| 0.5714286| 0.2909091|\n    |CT Full             |    0.962| 0.2682927| 0.5789474| 0.3666667|\n    |CT Pruned           |    0.964| 0.3170732| 0.6190476| 0.4193548|\n    \n    ```{.r .cell-code}\n    # Discussion of Costs and Model Preference:\n    # Costs of False Positives:\n    # A false positive means the model predicts a customer will default, but they will not.\n    # Potential costs for the credit card company include:\n    # - Annoying customers and damaging customer relationships by taking unnecessary actions\n    #   like lowering credit limits or refusing transactions.\n    # - Potential loss of business if customers switch to competitors due to these actions.\n    # - Resources spent on investigating accounts flagged as high risk that are actually low risk.\n    # Costs of False Negatives:\n    # A false negative means the model predicts a customer will not default, but they actually will.\n    # Potential costs for the credit card company include:\n    # - Direct financial losses from unpaid balances.\n    # - Increased costs associated with debt collection and recovery processes.\n    # - Potential impact on overall profitability and risk management.\n    \n    # Model Preference:\n    # The preferred model depends on the relative costs of false positives and false negatives.\n    # Typically, in credit card default prediction, the cost of a false negative (losing money on a\n    # defaulting customer) is much higher than the cost of a false positive (inconveniencing a\n    # customer). Therefore, a model with higher recall (ability to correctly identify actual defaults)\n    # might be preferred, even if it comes at the cost of lower precision (more false positives).\n    \n    # Looking at the performance metrics, it seems that the pruned classification tree with its\n    # high recall and precision, is the most appropriate choice. Even if its precision was\n    # lower than that of other models, the credit card company might prioritize minimizing\n    # false negatives to avoid significant financial losses.\n    ```\n\n\n\n3.  In the course materials, you should find the `advertising` data set discussed extensively in the lecture. Using 5-fold cross validation, we compared the performance of a linear regression and a KNN regression in class. A linear regression using all three advertising budgets as predictors had an estimated test MSE of 3.06, while a KNN regression with the same predictors and $K=2$, even had an estimated test MSE of 1.94. The goal is now to additionally examine the performance of a regression tree on that data set.\n    a. We will start with quite an **advanced** exercise that manually determines the first split in the tree. This is meant to build deeper understanding of what goes on behind the scenes of `rpart`, but is not strictly necessary, so you can skip ahead to c. if you wish to. The goal here is to write a function that takes two arguments: a vector of training observations of a quantitative feature and a vector of training observations of a quantitative response. The function should return the optimal split point $s$ and the resulting $RSS$ for that variable. Hint: first determine all possible split points of the predictor. Then cycle through the split points, at each point determining the left $RSS$, the right $RSS$ and then the sum. Save the split points and total $RSS$ in a matrix and return the row of the matrix for which the total $RSS$ is minimized. You may want to write a simple helper function to compute $RSS$.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rss <- function(y) sum((y - mean(y))^2)\n    \n    optimal_split <- function(x, y){\n      split_points <- sort(unique(x))[-1]\n      rss <- numeric(length(split_points))\n      i <- 1L\n      for(s in split_points){\n        rss_left <- rss(y[x < s])\n        rss_right <- rss(y[x >= s])\n        rss[i] <- rss_left + rss_right\n        i <- i + 1L\n      }\n      out <- cbind(split_points, rss)\n      return(out[which.min(rss), ])\n    }\n    ```\n    :::\n\n\n\n    b. Now, import the advertising data set and select only the columns 3 to 6 (we do not need the rest). Use your function from a. to determine the optimal split for `social_media`, for `radio` and for `newspaper`, when using `sales` as a response variable. Which of those three predictors and split points is able to generate the lowest $RSS$? This will be our first split.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    advertising <- read.csv(\"../data/advertising.csv\")\n    advertising <- advertising[, 3:6]\n    optimal_split(advertising$social_media, advertising$sales)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    split_points          rss \n         123.100     2858.538 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    optimal_split(advertising$radio, advertising$sales)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    split_points          rss \n          26.800     3923.347 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    optimal_split(advertising$newspaper, advertising$sales)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    split_points          rss \n          51.200     4881.959 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Lowest RSS is achieved for variable social_media at split point 123.1.\n    # This gives an RSS of 2858.538.\n    ```\n    :::\n\n\n\n    c. If you have not done it so far, import the advertising data set and select only the columns 3 to 6 (we do not need the rest). Employ the `rpart` package to fit a regression tree for `sales`, using the other three variables as predictors and setting the complexity parameter `cp` to zero for the fitting process. Visualize the resulting tree. If you did exercises a. and b., compare the first split (at the very top) to the one you determined in exercise b. Did you come to the same result as the package?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rt <- rpart(sales ~ ., data = advertising, control = list(cp = 0))\n    rpart.plot(rt)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-24-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # According to rpart, the first split happens on social_media at split\n    # point 122, which is slightly different to the 123.1 that we determined.\n    # However, the splits made are actually equivalent as there are no observations\n    # between 122 and 123.1, so it is just that rpart has a slightly different\n    # method for determining possible split points. The following proves that\n    # the first splits are equivalent:\n    table(advertising$social_media < 123.1, advertising$social_media < 122)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           \n            FALSE TRUE\n      FALSE   117    0\n      TRUE      0   83\n    ```\n    \n    \n    :::\n    :::\n\n\n\n    d. Using the fitted regression tree from c., determine the optimal complexity parameter `cp` and fit and visualize the optimally pruned regression tree for this data set.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Graphic analysis (run rsq.rpart(rt)) shows that a reasonable number of splits is 6.\n    # The corresponding cp parameter is 0.018284, so we use that\n    # to prune the tree:\n    rt_pruned <- prune(rt, cp = 0.018284)\n    rpart.plot(rt_pruned)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-25-1.png){width=672}\n    :::\n    :::\n\n\n\n    e. Finally, determine the test MSE of the optimally pruned tree in 5-fold cross validation. To do this, simply set the complexity parameter `cp` to the optimal value you found in d. already during fitting in each loop cycle of the cross validation. How does the performance of the optimally pruned regression tree compare to the linear regression and KNN model from the lecture?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    K <- 5\n    advertising$fold <- sample(rep(1:K, length.out = nrow(advertising)))\n    mses <- numeric(K)\n    \n    for(k in 1:K){\n      m <- rpart(sales ~ social_media + radio + newspaper, data = subset(advertising, fold != k),\n                 control = list(cp = 0.018284))\n      preds <- predict(m, newdata = subset(advertising, fold == k))\n      mses[k] <- mean((preds - advertising$sales[advertising$fold == k])^2)\n    }\n    mean(mses)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3.813512\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # With an MSE of 3.77, the performance of the optimally pruned regression tree seems\n    # to be slightly worse than the linear regression model that uses the three\n    # predictors and considerably worse than the corresponding KNN regression model.\n    ```\n    :::\n\n\n\n4.  We already know the `penguins` data set of the `palmerpenguins` package from the visualization part of this course. We will now try to build classification models for determining the species of penguin based on certain physical characteristics.\n    a. Load the data set and create a relative frequency table of the different penguin species in the entire data set. What is a crucial difference of this classification task compared to the previous one on defaults of credit card customers in exercise 2.?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(palmerpenguins)\n    prop.table(table(penguins$species))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n       Adelie Chinstrap    Gentoo \n    0.4418605 0.1976744 0.3604651 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # There are three species of penguins and therefore three classes. Unlike the default\n    # example, which was a binary classification problem, the task of classifying the\n    # penguins is therefore a multi-class classification problem.\n    ```\n    :::\n\n\n\n    b. In the usual way, perform a random 80-20 train-test split. Make sure to remove any NA's in the data set before you do so.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    penguins <- as.data.frame(na.omit(penguins))\n    n <- nrow(penguins)\n    train_ind <- sample(n, floor(0.8*n))\n    \n    train <- penguins[train_ind, ]\n    test <- penguins[-train_ind, ]\n    ```\n    :::\n\n\n\n    c. Out of the classification methods that we have learned, the ones that can easily be applied to multi-class classification problems are KNN classification and decision trees. We will start with the former: run a 5-fold cross-validation experiment to determine the accuracy-maximizing value of $K$ for two different KNN classifiers: one that only uses predictors `bill_length_mm` and `bill_depth_mm` and one that **additionally** uses predictors `flipper_length_mm` and `body_mass_g` to predict `species`. Make sure you scale the predictors in every iteration over the 5 folds. Hint: it might be helpful to write a little helper function that -- given a vector of class predictions and a vector of true classes -- computes the accuracy, i.e. the proportion of cases, where predicted class is equal to true class.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    K <- 5\n    train$fold <- sample(rep(1:K, length.out = nrow(train)))\n    n_neighbours <- 2:20\n    \n    accuracy <- function(y_pred, y_true) mean(y_pred == y_true)\n    \n    for(nn in n_neighbours){\n      knn_colname <- sprintf(\"class_preds_KNN%d\", nn)\n      for(k in 1:K){\n        X_train_scaled <- scale(subset(train, fold != k, 3:6))\n        y_train <- train$species[train$fold != k]\n        X_test_scaled <- scale(subset(train, fold == k, 3:6))\n        \n        preds_knn_small <- knn(train = X_train_scaled[, 1:2],\n                               test = X_test_scaled[, 1:2],\n                               cl = y_train, k = nn)\n        preds_knn_big <- knn(train = X_train_scaled,\n                             test = X_test_scaled,\n                             cl = y_train, k = nn)\n        \n        train[train$fold == k, paste0(knn_colname, \"SMALL\")] <- preds_knn_small\n        train[train$fold == k, paste0(knn_colname, \"BIG\")] <- preds_knn_big\n      }\n    }\n    \n    # Compute predictive accuracies of the KNN models\n    results <- data.frame(model = names(train)[10:47],\n                          accuracy = 0)\n    for(i in 1:nrow(results)){\n      results$accuracy[i] <- accuracy(train[[results$model[i]]], train$species)\n    }\n    results[which.max(results$accuracy), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                     model  accuracy\n    10 class_preds_KNN6BIG 0.9924812\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # The big KNN (using bill_length_mm, bill_depth_mm, flipper_length_mm and body_mass_g \n    # as predictors) seems to consistently outperform the model using just the first two\n    # predictors. The best big model has K = 6.\n    ```\n    :::\n\n\n\n    d. Now, we will look at a classification tree for this data set. Fit a full classification tree for `species` based on predictors `bill_length_mm`, `bill_depth_mm`, `flipper_length_mm` and `body_mass_g` to the training data in the same way you would normally do for a binary classification problem. Determine the optimal complexity parameter `cp` and use it to also fit an optimally pruned tree. Visualize the outcome. What do you notice about the visualized tree compared to the binary classification case?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ct <- rpart(species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g,\n                data = train, control = list(cp = 0))\n    # Graphic analysis (run rsq.rpart(ct)) shows that a reasonable number of splits is 2.\n    # The corresponding cp parameter is 0.045752, so we use that\n    # to prune the tree:\n    ct_pruned <- prune(ct, 0.045752)\n    rpart.plot(ct_pruned)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-30-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Now, there are three colours in the plot, one for each class.\n    ```\n    :::\n\n\n\n    e. Use the best-performing KNN model from c. as well as both the full and the optimally pruned tree from d. to predict the species of the penguins in the hold-out test data you created in b. Which of the three models gives the highest test accuracy in predicting the penguin species?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    X_train_scaled <- scale(train[, 3:6])\n    y_train <- train$species\n    X_test_scaled <- scale(test[, 3:6])\n    \n    preds_knn <- knn(train = X_train_scaled,\n                     test = X_test_scaled,\n                     cl = y_train, k = 6)\n    preds_ct <- predict(ct, newdata = test, type = \"class\")\n    preds_ct_pruned <- predict(ct_pruned, newdata = test, type = \"class\")\n    \n    # Features for all 3 methods:\n    # bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g\n    \n    # Accuracy of KNN with K = 6:\n    accuracy(preds_knn, test$species)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.9552239\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Accuracy of full CT:\n    accuracy(preds_ct, test$species)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.9104478\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Accuracy of pruned CT:\n    accuracy(preds_ct_pruned, test$species)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.9104478\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # With an accuracy of approx. 95.5%, the KNN model is clearly the best-performing.\n    ```\n    :::\n\n\n\n5.  The Seeds data set (obtainable from [here](https://archive.ics.uci.edu/dataset/236/seeds)) contains measurements of geometrical properties of kernels belonging to three different varieties of wheat: Kama, Rosa, and Canadian. Although the target class (variety) is known, we will approach this task as an **unsupervised learning** problem.\n    a. Download the data set from the given link to the UCI Machine Learning Repository. Note that the data set does not include any column names, so we have to set them manually. From left to right, the columns contain the following measurements: area $A$, perimeter $P$, compactness $C = 4\\pi \\cdot A/P^2$, length of kernel, width of kernel, asymmetry coefficient, length of kernel groove and wheat variety (1 for Kama, 2 for Rosa or 3 for Canadian). Name the columns of the `data.frame` accordingly and transform the wheat variety column into a factor with the `labels` argument set appropriately.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    seeds <- read.table(\"../data/seeds_dataset.txt\")\n    names(seeds) <- c(\"area\", \"perimeter\", \"compactness\", \"kernel_length\",\n                      \"kernel_width\", \"asymmetry\", \"groove_length\", \"variety\")\n    seeds$variety <- factor(seeds$variety, labels = c(\"Kama\", \"Rosa\", \"Canadian\"))\n    ```\n    :::\n\n\n\n    b. Visualize the following bivariate relationships in a scatter plot: `perimeter` vs. `groove_length`, `kernel_width` vs. `groove_length` and `kernel_length` vs. `groove_length`. Do you see any clearly identifiable groups emerging from these bivariate plots?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(seeds, aes(x = perimeter, y = groove_length)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-33-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    ggplot(seeds, aes(x = kernel_width, y = groove_length)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-33-2.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    ggplot(seeds, aes(x = kernel_length, y = groove_length)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-33-3.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Usually at least two distinct regions identifiable, however we will be clustering\n    # on all variables, so even if no distinct groups are identifiable in two dimensions\n    # there might be in higher dimensions.\n    ```\n    :::\n\n\n\n    c. Create a new `data.frame` called `seeds_scaled`, which contains all variables except for `variety` and all of them in their scaled version, i.e. with their mean removed and divided by their standard deviation.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    seeds_scaled <- as.data.frame(scale(seeds[, 1:7]))\n    ```\n    :::\n\n\n\n    d. On the entire `seeds_scaled` data set, run K-means clustering with different values of $k$ (e.g. from 1 to 10). In each run, extract the within-cluster sum of squares and store the results in a vector named `withinss`. Hint: the within-cluster sum of squares can be obtained under the name `tot.withinss` from the fitted `kmeans` object.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    k <- 1:10\n    withinss <- sapply(k, function(k) kmeans(seeds_scaled, centers = k)$tot.withinss)\n    ```\n    :::\n\n\n\n    e. Plot the number of clusters $k$ (on the x-axis) against the values of `withinss` (on the y-axis). Where is the \"elbow\" in that plot and which value of $k$ do you deem most appropriate as a consequence?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_withinss <- data.frame(k = k, withinss = withinss)\n    ggplot(df_withinss, aes(x = k, y = withinss)) +\n      geom_line() + \n      geom_point() +\n      scale_x_continuous(breaks = k)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-36-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Now, there is obviously some subjective judgement in this, but there is a good argument\n    # to be made that the elbow in that plot occurs for k = 3, which is therefore the value\n    # we deem most appropriate for the number of clusters. Of course, this is cheating slightly\n    # as we know that there are three wheat variants in the data. This type of class information\n    # is not always available when performing clustering.\n    ```\n    :::\n\n\n\n    f. Run K-means clustering again, this time with the optimal $k$ you chose in e. Add the cluster assignment vector (as a factor) to your original `data.frame` and highlight the identified clusters by colour in the bivariate scatter plots from b. Do they match with your expectations regarding the groups you visually identified in b.?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    km_seeds <- kmeans(seeds_scaled, centers = 3)\n    seeds$clust <- factor(km_seeds$cluster)\n    \n    ggplot(seeds, aes(x = perimeter, y = groove_length, color = clust)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-37-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    ggplot(seeds, aes(x = kernel_width, y = groove_length, color = clust)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-37-2.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    ggplot(seeds, aes(x = kernel_length, y = groove_length, color = clust)) +\n      geom_point()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](exercise-solutions-iv_files/figure-html/unnamed-chunk-37-3.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    # Clustering appears generally sensible based on the visual impression from b.\n    # The separation of obvious, visually identifiable clusters was successful and\n    # even less obvious cluster assignments appear reasonable.\n    ```\n    :::\n\n\n\n    g. Finally, for each cluster, determine which wheat variety appears in it most frequently and **label** the cluster according to that variety. Then create a cross-tabulation of that label with the actual wheat varieties. How well was the K-means algorithm able to identify wheat varieties without having any information about these classes?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    best_labels <- sapply(levels(seeds$clust),\n                          function(x) names(which.max(table(seeds$variety[seeds$clust == x]))))\n    # Note: the subsequent ordering of the levels is not strictly necessary,\n    # it is only done here to have the table appear in the nice confusion matrix type of way.\n    seeds$clust <- factor(seeds$clust,\n                          levels = match(levels(seeds$variety), best_labels),\n                          labels = levels(seeds$variety))\n    table(seeds$clust, seeds$variety)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n              \n               Kama Rosa Canadian\n      Kama       62    5        4\n      Rosa        2   65        0\n      Canadian    6    0       66\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Clearly, the clusters are remarkably congruent with the wheat varieties even though\n    # the fitting of the clusters happened in a fully unsupervised fashion, i.e. there\n    # was no information on wheat variety used whatsoever.\n    ```\n    :::\n",
    "supporting": [
      "exercise-solutions-iv_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}