{
  "hash": "d6abeb554c63ea82aec3c9bb5ca32458",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises II\"\nsubtitle: \"Data Science and Data Analytics\"\nauthor: \"Julian Amon, PhD\"\ndate: \"March 31, 2025\"\ndate-format: long\nformat: html\nhighlight-style: arrow\nexecute: \n  warning: true\n  echo: true\n  eval: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# The Data Science Workflow -- Import\n\n\n\n\n\n\n\n\n\n\n1.  Open RStudio and run an R command in the console to determine your working directory. Set your working directory to your `Downloads` folder.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    getwd()\n    setwd(\"/home/julian/Downloads\")\n    ```\n    :::\n\n\n\n\n2.  Download the Wine Quality data set from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/186/wine+quality). It contains physicochemical properties of red and white vinho verde wine samples, from the north of Portugal. The data set comprises two `csv` files, one for red and one for white wine samples. Inspect the file with a text editor to determine the correct import function and the arguments to be used. Then read both files into R using the appropriate function call and save the resulting `data.frames` in objects named `white_wines` and `red_wines`, respectively. Inspect the first 10 rows of the two `data.frames` using `head` and verify that the columns have the correct data types.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    white_wine_path <- file.path(\"../data\", \"winequality-white.csv\")\n    red_wine_path <- file.path(\"../data\", \"winequality-red.csv\")\n    readLines(white_wine_path, 5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"\\\"fixed acidity\\\";\\\"volatile acidity\\\";\\\"citric acid\\\";\\\"residual sugar\\\";\\\"chlorides\\\";\\\"free sulfur dioxide\\\";\\\"total sulfur dioxide\\\";\\\"density\\\";\\\"pH\\\";\\\"sulphates\\\";\\\"alcohol\\\";\\\"quality\\\"\"\n    [2] \"7;0.27;0.36;20.7;0.045;45;170;1.001;3;0.45;8.8;6\"                                                                                                                                                 \n    [3] \"6.3;0.3;0.34;1.6;0.049;14;132;0.994;3.3;0.49;9.5;6\"                                                                                                                                               \n    [4] \"8.1;0.28;0.4;6.9;0.05;30;97;0.9951;3.26;0.44;10.1;6\"                                                                                                                                              \n    [5] \"7.2;0.23;0.32;8.5;0.058;47;186;0.9956;3.19;0.4;9.9;6\"                                                                                                                                             \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    readLines(red_wine_path, 5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"\\\"fixed acidity\\\";\\\"volatile acidity\\\";\\\"citric acid\\\";\\\"residual sugar\\\";\\\"chlorides\\\";\\\"free sulfur dioxide\\\";\\\"total sulfur dioxide\\\";\\\"density\\\";\\\"pH\\\";\\\"sulphates\\\";\\\"alcohol\\\";\\\"quality\\\"\"\n    [2] \"7.4;0.7;0;1.9;0.076;11;34;0.9978;3.51;0.56;9.4;5\"                                                                                                                                                 \n    [3] \"7.8;0.88;0;2.6;0.098;25;67;0.9968;3.2;0.68;9.8;5\"                                                                                                                                                 \n    [4] \"7.8;0.76;0.04;2.3;0.092;15;54;0.997;3.26;0.65;9.8;5\"                                                                                                                                              \n    [5] \"11.2;0.28;0.56;1.9;0.075;17;60;0.998;3.16;0.58;9.8;6\"                                                                                                                                             \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # The files are semicolon-delimited and use a decimal point.\n    # So we use read.csv2, but have to specify the decimal point:\n    white_wines <- read.csv2(white_wine_path, dec = \".\")\n    red_wines <- read.csv2(red_wine_path, dec = \".\")\n    head(white_wines)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      fixed.acidity volatile.acidity citric.acid residual.sugar chlorides\n    1           7.0             0.27        0.36           20.7     0.045\n    2           6.3             0.30        0.34            1.6     0.049\n    3           8.1             0.28        0.40            6.9     0.050\n    4           7.2             0.23        0.32            8.5     0.058\n    5           7.2             0.23        0.32            8.5     0.058\n    6           8.1             0.28        0.40            6.9     0.050\n      free.sulfur.dioxide total.sulfur.dioxide density   pH sulphates alcohol\n    1                  45                  170  1.0010 3.00      0.45     8.8\n    2                  14                  132  0.9940 3.30      0.49     9.5\n    3                  30                   97  0.9951 3.26      0.44    10.1\n    4                  47                  186  0.9956 3.19      0.40     9.9\n    5                  47                  186  0.9956 3.19      0.40     9.9\n    6                  30                   97  0.9951 3.26      0.44    10.1\n      quality\n    1       6\n    2       6\n    3       6\n    4       6\n    5       6\n    6       6\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(red_wines)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      fixed.acidity volatile.acidity citric.acid residual.sugar chlorides\n    1           7.4             0.70        0.00            1.9     0.076\n    2           7.8             0.88        0.00            2.6     0.098\n    3           7.8             0.76        0.04            2.3     0.092\n    4          11.2             0.28        0.56            1.9     0.075\n    5           7.4             0.70        0.00            1.9     0.076\n    6           7.4             0.66        0.00            1.8     0.075\n      free.sulfur.dioxide total.sulfur.dioxide density   pH sulphates alcohol\n    1                  11                   34  0.9978 3.51      0.56     9.4\n    2                  25                   67  0.9968 3.20      0.68     9.8\n    3                  15                   54  0.9970 3.26      0.65     9.8\n    4                  17                   60  0.9980 3.16      0.58     9.8\n    5                  11                   34  0.9978 3.51      0.56     9.4\n    6                  13                   40  0.9978 3.51      0.56     9.4\n      quality\n    1       5\n    2       5\n    3       5\n    4       6\n    5       5\n    6       5\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    unlist(lapply(white_wines, typeof))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           fixed.acidity     volatile.acidity          citric.acid \n                \"double\"             \"double\"             \"double\" \n          residual.sugar            chlorides  free.sulfur.dioxide \n                \"double\"             \"double\"             \"double\" \n    total.sulfur.dioxide              density                   pH \n                \"double\"             \"double\"             \"double\" \n               sulphates              alcohol              quality \n                \"double\"             \"double\"            \"integer\" \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    unlist(lapply(red_wines, typeof))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           fixed.acidity     volatile.acidity          citric.acid \n                \"double\"             \"double\"             \"double\" \n          residual.sugar            chlorides  free.sulfur.dioxide \n                \"double\"             \"double\"             \"double\" \n    total.sulfur.dioxide              density                   pH \n                \"double\"             \"double\"             \"double\" \n               sulphates              alcohol              quality \n                \"double\"             \"double\"            \"integer\" \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n3.  The file `native.csv` contains the names and favourite foods of three individuals. Inspect the file using a text editor and read the data into R using the appropriate function. What do you observe? How can you resolve this issue? Implement the necessary adaptations to read in the data without the occurring issue.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    native_path <- file.path(\"../data\", \"native.csv\")\n    native <- read.csv(native_path) # using read.csv as the file is comma-delimited\n    native # Clearly, there is an encoding issue...\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         name   favourite_food\n    1 Alienor         Cr\\xeape\n    2    Hans       Sp\\xe4tzle\n    3  Magnus Sm\\xf8rrebr\\xf8d\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Let's try to guess the encoding:\n    library(readr)\n    as.data.frame(guess_encoding(native_path))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n        encoding confidence\n    1 ISO-8859-1       0.22\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Seems to be ISO-8859-1, let's try:\n    native <- read.csv(native_path, fileEncoding = \"ISO-8859-1\")\n    native # It worked!\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         name favourite_food\n    1 Alienor          CrÃªpe\n    2    Hans        SpÃ¤tzle\n    3  Magnus     SmÃ¸rrebrÃ¸d\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Note: The fileEncoding \"Windows-1252\" would also work.\n    ```\n    :::\n\n\n\n\n\n4.  The Excel spreadsheet `datasets.xls` contains four worksheets, each with a different data set. Read all four work sheets into a list, such that each list element contains the `data.frame` holding the data of one work sheet. Inspect the `head` of each of the four `data.frames` to verify that the data has been read in correctly. Hint: you could use the `excel_sheets` function of the `readxl` package to identify the names of the four sheets and then read them into R using the appropriate function in a `for` loop.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(readxl)\n    \n    excel_path <- file.path(\"../data\", \"datasets.xls\")\n    sheet_names <- excel_sheets(excel_path)\n    excel_dfs <- list()\n    \n    for(sheet in sheet_names){\n      excel_dfs[[sheet]] <- as.data.frame(read_xls(excel_path, sheet = sheet))\n    }\n    lapply(excel_dfs, head, n = 5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $iris\n      Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n    1          5.1         3.5          1.4         0.2  setosa\n    2          4.9         3.0          1.4         0.2  setosa\n    3          4.7         3.2          1.3         0.2  setosa\n    4          4.6         3.1          1.5         0.2  setosa\n    5          5.0         3.6          1.4         0.2  setosa\n    \n    $mtcars\n       mpg cyl disp  hp drat    wt  qsec vs am gear carb\n    1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n    2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n    3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n    4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n    5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n    \n    $chickwts\n      weight      feed\n    1    179 horsebean\n    2    160 horsebean\n    3    136 horsebean\n    4    227 horsebean\n    5    217 horsebean\n    \n    $quakes\n         lat   long depth mag stations\n    1 -20.42 181.62   562 4.8       41\n    2 -20.62 181.03   650 4.2       15\n    3 -26.00 184.10    42 5.4       43\n    4 -17.97 181.66   626 4.1       19\n    5 -20.42 181.96   649 4.0       11\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n5.  Search the data documentation of the [Gapminder project](https://www.gapminder.org/data/documentation/) for data on GDP per capita in constant PPP dollars (`PPP$2017` or `PPP$2021`). Gapminder offers all of their data sets in the form of publicly available Google Sheets documents. Open the corresponding Google Sheets document for the GDP per capita data and identify the sheet ID from the URL. Find the worksheet for `regions` (i.e. Africa, Asia, Europe and The Americas) and read the data from that worksheet into R as a `data.frame` with the help of the `googlesheets4` package. Inspect the first couple of rows using `head` and verify that the columns have the correct data types.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # See here for the correct page in the Gapminder documentation:\n    # https://www.gapminder.org/data/documentation/gd001/\n    \n    library(googlesheets4)\n    \n    gs4_deauth()\n    sheet_id_2021 <- \"1RuGcXnt6mrhXumhUuRv4-lC4DmPyohznCiJy8paPM7Q\"\n    sheet_id_2017 <- \"1KcsWpIxQXYER9Ydoo1WWzBzCVEGNtC_vV88gaPw-3w0\"\n    gdp_per_cap <- as.data.frame(read_sheet(sheet_id_2021,\n                                            sheet = \"data-for-regions-by-year\",\n                                            range = \"A1:F1205\"))\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    â Reading from \"GM-GDP per capita - Dataset - v31\".\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    â Range ''data-for-regions-by-year'!A1:F1205'.\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(gdp_per_cap)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         geo   name time Income per person (ppp$2021)   GDP total\n    1 africa Africa 1800                     437.6993 57102830744\n    2 africa Africa 1801                     437.3229 57183022380\n    3 africa Africa 1802                     436.9500 57268094833\n    4 africa Africa 1803                     436.5015 57347632038\n    5 africa Africa 1804                     436.0338 57428983174\n    6 africa Africa 1805                     434.7656 57408910599\n      GDP per capita growth (%)\n    1                        NA\n    2                     -0.09\n    3                     -0.09\n    4                     -0.10\n    5                     -0.11\n    6                     -0.29\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    unlist(lapply(gdp_per_cap, typeof))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                             geo                         name \n                     \"character\"                  \"character\" \n                            time Income per person (ppp$2021) \n                        \"double\"                     \"double\" \n                       GDP total    GDP per capita growth (%) \n                        \"double\"                     \"double\" \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n# The Data Science Workflow -- Tidy and Transform\n\n1.  The `flights` data set:\n    a. Import the `nyc13_flights.csv` data set and give it the name `flights`.\n    b. Use the code from the lecture to give appropriate names to the columns of `flights` and inspect the first 10 rows of the `data.frame` using `head`.\n    c. Remove all rows from `flights` that have an `NA` in any column (Hint: have a look at the function `na.omit`). How many rows in the `data.frame` are lost as a consequence of this `NA` removal step?\n    d. The departure times are given in a weird format distributed over several columns in the `data.frame`. To make this information usable, create a column called `dep_time_dt`, which contains the actual departure time as a `POSIXct` date-time. Hint: use `paste` to bring together the date information from the three relevant columns. Then use the `%/%` and `%%` operators to extract hour and minute from the `dep_time` column and `paste` it to the date. Finally, use `as.POSIXct` and the correct time zone to turn this string into a date-time.\n    e. Filter the `flights` data set to only include:\n        -   flights operated by United Air Lines or US Airways (carrier codes `UA` and `US`, respectively).\n        -   flights from LaGuardia (LGA) to Fort Lauderdale (FLL).\n        -   flights operated by Delta Air Lines (carrier code `DL`) with a departure delay of more than three hours.\n        -   flights from Newark (EWR) to Chicago (ORD) operated by Envoy Air (carrier code `MQ`) on 1st June 2013.\n        -   flights with an air time of at most half an hour operated by American Airlines (carrier code `AA`).\n        -   flights from LaGuardia (LGA) or JFK to Nashville (BNA) with an air time of more than 2.5 hours.\n        -   flights that departed after 16th May 2013 (careful: be aware of the time zone!).\n    f. Using appropriate functions in R, answer the following questions:\n        -   What is the most frequent destination airport flown to from LaGuardia (LGA)?\n        -   Which carrier has the most departures out of JFK? Which proportion of the total number of departures do they cover there?\n        -   Which flight had the longest air time out of the ones contained in the data set?\n        -   How often is the flight with the shortest distance flown in the time period covered by the data set?\n        -   What is the average departure delay at each of the three NYC origin airports?\n        -   What is the average arrival delay of flights from JFK to Los Angeles (LAX) in each month?\n        -   What is the tail number of the airplane that has covered the most distance over all flights in the data set?\n        -   What is the distance of the longest flight (in terms of distance) offered out of LaGuardia (LGA) for each carrier?\n    g. Import the `nyc13_airports.csv` data set and give it the name `airports`.\n    h. The `airports` data set contains the FAA code, the full name, latitude and longitude and time zone information of 1458 airports in the United States. Using an **inner join**, join the `name`, `lat` and `lon` of the **destination** airport into the `flights` data set (mind the differences in key column name between `flights` and `airports`!). Record the number of rows of the `flights` data set before and after the join. How many rows were lost due to the inner join? How could that have been avoided?\n    i. Rename the new columns in `flights` to `dest_name`, `dest_lat` and `dest_lon`, respectively.\n    j. Import the `nyc13_planes.csv` data set and give it the name `planes`.\n    k. The `planes` data set contains the tail number, manufacturing year, type, manufacturer, model, number and type of engines and average cruising speed of 3322 airplanes in commercial service in the United States. Using a **left join**, join the `manufacturer` and `model` of the plane into the `flights` data set. For how many flights was no plane information found in `planes`?\n    l. Rename the new columns in `flights` to `plane_manufacturer` and `plane_model`, respectively.\n    \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # a.\n    flights <- read.csv(\"../data/nyc13_flights.csv\")\n    \n    # b.\n    names(flights) <- c(\"year\", \"month\", \"day\", \"dep_time\", \"sched_dep_time\", \"dep_delay\",\n                    \"arr_time\", \"sched_arr_time\", \"arr_delay\", \"carrier\", \"flight\",\n                    \"tail_num\", \"origin\", \"dest\", \"air_time\", \"distance\", \"time_hour\")\n    head(flights, 10)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n       year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    1  2013     1   1      517            515         2      830            819\n    2  2013     1   1      533            529         4      850            830\n    3  2013     1   1      542            540         2      923            850\n    4  2013     1   1      544            545        -1     1004           1022\n    5  2013     1   1      554            600        -6      812            837\n    6  2013     1   1      554            558        -4      740            728\n    7  2013     1   1      555            600        -5      913            854\n    8  2013     1   1      557            600        -3      709            723\n    9  2013     1   1      557            600        -3      838            846\n    10 2013     1   1      558            600        -2      753            745\n       arr_delay carrier flight tail_num origin dest air_time distance\n    1         11      UA   1545   N14228    EWR  IAH      227     1400\n    2         20      UA   1714   N24211    LGA  IAH      227     1416\n    3         33      AA   1141   N619AA    JFK  MIA      160     1089\n    4        -18      B6    725   N804JB    JFK  BQN      183     1576\n    5        -25      DL    461   N668DN    LGA  ATL      116      762\n    6         12      UA   1696   N39463    EWR  ORD      150      719\n    7         19      B6    507   N516JB    EWR  FLL      158     1065\n    8        -14      EV   5708   N829AS    LGA  IAD       53      229\n    9         -8      B6     79   N593JB    JFK  MCO      140      944\n    10         8      AA    301   N3ALAA    LGA  ORD      138      733\n                 time_hour\n    1  2013-01-01 05:00:00\n    2  2013-01-01 05:00:00\n    3  2013-01-01 05:00:00\n    4  2013-01-01 05:00:00\n    5  2013-01-01 06:00:00\n    6  2013-01-01 05:00:00\n    7  2013-01-01 06:00:00\n    8  2013-01-01 06:00:00\n    9  2013-01-01 06:00:00\n    10 2013-01-01 06:00:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # c.\n    n_before <- nrow(flights)\n    flights <- na.omit(flights)\n    n_after <- nrow(flights)\n    sprintf(\"%d rows were lost!\", n_before - n_after)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"5480 rows were lost!\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # d.\n    flights$dep_time_dt <- as.POSIXct(paste(flights$year, flights$month, flights$day,\n                                            flights$dep_time %/% 100,\n                                            flights$dep_time %% 100),\n                                      format = \"%Y %m %d %H %M\", tz = \"America/New_York\")\n    head(flights[,c(\"year\", \"month\", \"day\", \"dep_time\", \"dep_time_dt\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      year month day dep_time         dep_time_dt\n    1 2013     1   1      517 2013-01-01 05:17:00\n    2 2013     1   1      533 2013-01-01 05:33:00\n    3 2013     1   1      542 2013-01-01 05:42:00\n    4 2013     1   1      544 2013-01-01 05:44:00\n    5 2013     1   1      554 2013-01-01 05:54:00\n    6 2013     1   1      554 2013-01-01 05:54:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # e. (results always in included in head(), to avoid too long outputs)\n    head(subset(flights, carrier == \"UA\" | carrier == \"US\"))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n       year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    1  2013     1   1      517            515         2      830            819\n    2  2013     1   1      533            529         4      850            830\n    6  2013     1   1      554            558        -4      740            728\n    13 2013     1   1      558            600        -2      924            917\n    14 2013     1   1      558            600        -2      923            937\n    17 2013     1   1      559            600        -1      854            902\n       arr_delay carrier flight tail_num origin dest air_time distance\n    1         11      UA   1545   N14228    EWR  IAH      227     1400\n    2         20      UA   1714   N24211    LGA  IAH      227     1416\n    6         12      UA   1696   N39463    EWR  ORD      150      719\n    13         7      UA    194   N29129    JFK  LAX      345     2475\n    14       -14      UA   1124   N53441    EWR  SFO      361     2565\n    17        -8      UA   1187   N76515    EWR  LAS      337     2227\n                 time_hour         dep_time_dt\n    1  2013-01-01 05:00:00 2013-01-01 05:17:00\n    2  2013-01-01 05:00:00 2013-01-01 05:33:00\n    6  2013-01-01 05:00:00 2013-01-01 05:54:00\n    13 2013-01-01 06:00:00 2013-01-01 05:58:00\n    14 2013-01-01 06:00:00 2013-01-01 05:58:00\n    17 2013-01-01 06:00:00 2013-01-01 05:59:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights, origin == \"LGA\" & dest == \"FLL\"))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n        year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    18  2013     1   1      600            600         0      851            858\n    62  2013     1   1      657            700        -3      959           1013\n    199 2013     1   1      931            930         1     1237           1238\n    220 2013     1   1      959           1002        -3     1313           1319\n    253 2013     1   1     1053           1050         3     1402           1358\n    297 2013     1   1     1155           1200        -5     1507           1519\n        arr_delay carrier flight tail_num origin dest air_time distance\n    18         -7      B6    371   N595JB    LGA  FLL      152     1076\n    62        -14      DL   1879   N318NB    LGA  FLL      164     1076\n    199        -1      B6    375   N508JB    LGA  FLL      161     1076\n    220        -6      DL   2379   N965DL    LGA  FLL      151     1076\n    253         4      B6    373   N520JB    LGA  FLL      165     1076\n    297       -12      DL   1443   N969DL    LGA  FLL      160     1076\n                  time_hour         dep_time_dt\n    18  2013-01-01 06:00:00 2013-01-01 06:00:00\n    62  2013-01-01 07:00:00 2013-01-01 06:57:00\n    199 2013-01-01 09:00:00 2013-01-01 09:31:00\n    220 2013-01-01 10:00:00 2013-01-01 09:59:00\n    253 2013-01-01 10:00:00 2013-01-01 10:53:00\n    297 2013-01-01 12:00:00 2013-01-01 11:55:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights, carrier == \"DL\" & dep_delay > 180))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    2599  2013     1   3     2008           1540       268     2339           1909\n    3970  2013     1   5     1344            817       327     1635           1127\n    11064 2013     1  13     1809            810       599     2054           1042\n    12196 2013     1  14     2229           1655       334      157           2029\n    19670 2013     1  23     1551            753       478     1812           1006\n    20555 2013     1  24     1554           1235       199     1940           1606\n          arr_delay carrier flight tail_num origin dest air_time distance\n    2599        270      DL   2027   N338NW    JFK  FLL      158     1069\n    3970        308      DL   1109   N309US    LGA  TPA      158     1010\n    11064       612      DL    269   N322NB    JFK  ATL      116      760\n    12196       328      DL    706   N370NW    JFK  AUS      243     1521\n    19670       486      DL   2119   N326NB    LGA  MSP      166     1020\n    20555       214      DL   2174   N3733Z    JFK  SLC      316     1990\n                    time_hour         dep_time_dt\n    2599  2013-01-03 15:00:00 2013-01-03 20:08:00\n    3970  2013-01-05 08:00:00 2013-01-05 13:44:00\n    11064 2013-01-13 08:00:00 2013-01-13 18:09:00\n    12196 2013-01-14 16:00:00 2013-01-14 22:29:00\n    19670 2013-01-23 07:00:00 2013-01-23 15:51:00\n    20555 2013-01-24 12:00:00 2013-01-24 15:54:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights,\n                origin == \"EWR\" & dest == \"ORD\" & carrier == \"MQ\" & month == 6 & day == 1))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    137957 2013     6   1      624            600        24      727            720\n    138032 2013     6   1      755            755         0      936            920\n    138218 2013     6   1     1151           1150         1     1305           1305\n    138296 2013     6   1     1343           1315        28     1450           1435\n           arr_delay carrier flight tail_num origin dest air_time distance\n    137957         7      MQ   3768   N9EAMQ    EWR  ORD      104      719\n    138032        16      MQ   3737   N519MQ    EWR  ORD      106      719\n    138218         0      MQ   3697   N546MQ    EWR  ORD      105      719\n    138296        15      MQ   3765   N504MQ    EWR  ORD      104      719\n                     time_hour         dep_time_dt\n    137957 2013-06-01 06:00:00 2013-06-01 06:24:00\n    138032 2013-06-01 07:00:00 2013-06-01 07:55:00\n    138218 2013-06-01 11:00:00 2013-06-01 11:51:00\n    138296 2013-06-01 13:00:00 2013-06-01 13:43:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights,\n                air_time <= 30 & carrier == \"AA\"))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    26433  2013     1  31     1233           1245       -12     1320           1350\n    103954 2013     4  25     1241           1245        -4     1330           1350\n    142896 2013     6   6     1239           1245        -6     1329           1350\n    146703 2013     6  10     1558           1600        -2     1713           1720\n    154175 2013     6  18     1235           1245       -10     1327           1355\n           arr_delay carrier flight tail_num origin dest air_time distance\n    26433        -30      AA   1850   N3JRAA    JFK  BOS       30      187\n    103954       -20      AA   1850   N3CWAA    JFK  BOS       30      187\n    142896       -21      AA   1850   N3CHAA    JFK  BOS       30      187\n    146703        -7      AA    854   N3EUAA    JFK  BOS       29      187\n    154175       -28      AA   1850   N3EGAA    JFK  BOS       30      187\n                     time_hour         dep_time_dt\n    26433  2013-01-31 12:00:00 2013-01-31 12:33:00\n    103954 2013-04-25 12:00:00 2013-04-25 12:41:00\n    142896 2013-06-06 12:00:00 2013-06-06 12:39:00\n    146703 2013-06-10 16:00:00 2013-06-10 15:58:00\n    154175 2013-06-18 12:00:00 2013-06-18 12:35:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights,\n                (origin == \"LGA\" | origin == \"JFK\") & flights$dest == \"BNA\" & air_time > 150))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    640   2013     1   1     1803           1620       103     2008           1750\n    643   2013     1   1     1806           1810        -4     2002           1945\n    722   2013     1   1     1934           1725       129     2126           1855\n    807   2013     1   1     2122           2125        -3     2312           2250\n    2519  2013     1   3     1847           1725        82     2102           1855\n    26792 2013     1  31     1945           1810        95     2158           1945\n          arr_delay carrier flight tail_num origin dest air_time distance\n    640         138      MQ   4622   N504MQ    LGA  BNA      154      764\n    643          17      MQ   4484   N711MQ    LGA  BNA      152      764\n    722         151      MQ   4255   N909MQ    JFK  BNA      154      765\n    807          22      MQ   4660   N1EAMQ    LGA  BNA      153      764\n    2519        127      MQ   4255   N630MQ    JFK  BNA      164      765\n    26792       133      MQ   4484   N722MQ    LGA  BNA      157      764\n                    time_hour         dep_time_dt\n    640   2013-01-01 16:00:00 2013-01-01 18:03:00\n    643   2013-01-01 18:00:00 2013-01-01 18:06:00\n    722   2013-01-01 17:00:00 2013-01-01 19:34:00\n    807   2013-01-01 21:00:00 2013-01-01 21:22:00\n    2519  2013-01-03 17:00:00 2013-01-03 18:47:00\n    26792 2013-01-31 18:00:00 2013-01-31 19:45:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(subset(flights,\n                dep_time_dt >= as.POSIXct(\"2013-05-17 00:00:00\", tz = \"America/New_York\")))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    124078 2013     5  17       11           2359        12      336            345\n    124079 2013     5  17      458            500        -2      642            640\n    124080 2013     5  17      506            515        -9      751            811\n    124081 2013     5  17      533            540        -7      829            840\n    124082 2013     5  17      548            550        -2      831            845\n    124083 2013     5  17      551            600        -9      823            850\n           arr_delay carrier flight tail_num origin dest air_time distance\n    124078        -9      B6    701   N524JB    JFK  SJU      189     1598\n    124079         2      US   1431   N196UW    EWR  CLT       83      529\n    124080       -20      UA   1288   N62631    EWR  IAH      188     1400\n    124081       -11      AA    701   N613AA    JFK  MIA      142     1089\n    124082       -14      UA   1077   N73270    EWR  MIA      145     1085\n    124083       -27      AA    707   N3FYAA    LGA  DFW      186     1389\n                     time_hour         dep_time_dt\n    124078 2013-05-17 23:00:00 2013-05-17 00:11:00\n    124079 2013-05-17 05:00:00 2013-05-17 04:58:00\n    124080 2013-05-17 05:00:00 2013-05-17 05:06:00\n    124081 2013-05-17 05:00:00 2013-05-17 05:33:00\n    124082 2013-05-17 05:00:00 2013-05-17 05:48:00\n    124083 2013-05-17 06:00:00 2013-05-17 05:51:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # f.\n    sort(table(subset(flights, origin == \"LGA\", dest)),\n         decreasing = TRUE)[1:3] # Answer: ATL (Atlanta)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    dest\n     ATL  ORD  MIA \n    5069 3950 2739 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    jfk_carriers <- sort(table(subset(flights, origin == \"JFK\", carrier)),\n                         decreasing = TRUE)\n    prop.table(jfk_carriers) # Answer: B6 (JetBlue Airways), covering 37.8% of departures\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    carrier\n             B6          DL          9E          AA          MQ          UA \n    0.378462963 0.181851852 0.136240741 0.128537037 0.060222222 0.040444444 \n             VX          US          EV          HA \n    0.033037037 0.025537037 0.012314815 0.003351852 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    subset(flights, air_time == max(air_time)) # Answer: EWR - HNL on 17th March 2013.\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n    67176 2013     3  17     1337           1335         2     1937           1836\n          arr_delay carrier flight tail_num origin dest air_time distance\n    67176        61      UA     15   N77066    EWR  HNL      695     4963\n                    time_hour         dep_time_dt\n    67176 2013-03-17 13:00:00 2013-03-17 13:37:00\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    nrow(subset(flights, distance == min(distance))) # Answer: 48 times (EWR - PHL)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 48\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    tapply(flights$dep_delay, flights$origin, mean) # Answer on avg. dep_delays\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         EWR      JFK      LGA \n    16.86164 12.68735 10.77449 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    jfk_la <- subset(flights, origin == \"JFK\" & dest == \"LAX\", c(month, arr_delay))\n    tapply(jfk_la$arr_delay, jfk_la$month, mean) # Answer on avg. arr_delay (JFK-LAX)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n            1         2         3         4         5         6 \n    -6.396146 -8.195489 -6.568277  2.062567 -6.106583 10.857451 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    plane_dists <- tapply(flights$distance, flights$tail_num, sum)\n    plane_dists[which.max(plane_dists)] # Answer: N327AA\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    N327AA \n    461291 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    lga_flights <- subset(flights, origin == \"LGA\", c(dest, distance, carrier))\n    tapply(lga_flights$distance, lga_flights$carrier, max) # Answer on max dist out of LGA\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      9E   AA   B6   DL   EV   F9   FL   MQ   OO   UA   US   WN   YV \n     659 1389 1080 1620 1389 1620  762 1147  733 1620  544 1620  544 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # g.\n    airports <- read.csv(\"../data/nyc13_airports.csv\")\n    \n    # h.\n    n_before <- nrow(flights)\n    flights <- merge(flights, airports[, c(\"faa\", \"name\", \"lat\", \"lon\")],\n                     by.x = \"dest\", by.y = \"faa\", all = FALSE)\n    n_after <- nrow(flights)\n    n_before - n_after\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3855\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # 3855 rows were lost due to the inner join, i.e. for 3855 flights, we did not find\n    # the destination airport in the airports data set. To avoid losing these flights,\n    # we could use a left join instead, which would put NA's for the values of name,\n    # lat and lon of the airports we were not able to find, instead of removing the\n    # corresponding rows altogether.\n    \n    # i.\n    airport_cols <- c(\"name\", \"lat\", \"lon\")\n    names(flights)[names(flights) %in% airport_cols] <- paste0(\"dest_\", airport_cols)\n    head(flights[,c(\"month\", \"day\", \"dep_time\", \"origin\", \"dest\",\n                    \"dest_name\", \"dest_lat\", \"dest_lon\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      month day dep_time origin dest                         dest_name dest_lat\n    1     6  25     2015    JFK  ABQ Albuquerque International Sunport 35.04022\n    2     5   6     1956    JFK  ABQ Albuquerque International Sunport 35.04022\n    3     5  21     1954    JFK  ABQ Albuquerque International Sunport 35.04022\n    4     5  13     2053    JFK  ABQ Albuquerque International Sunport 35.04022\n    5     5  20     1959    JFK  ABQ Albuquerque International Sunport 35.04022\n    6     6  22     2006    JFK  ABQ Albuquerque International Sunport 35.04022\n       dest_lon\n    1 -106.6092\n    2 -106.6092\n    3 -106.6092\n    4 -106.6092\n    5 -106.6092\n    6 -106.6092\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # j.\n    planes <- read.csv(\"../data/nyc13_planes.csv\")\n    \n    # k.\n    flights <- merge(flights, planes[, c(\"tail_num\", \"manufacturer\", \"model\")],\n                     by = \"tail_num\", all.x = TRUE)\n    flights <- flights[order(flights$dep_time_dt), ] # Re-order by departure time\n    sprintf(\"For %d flights, no plane information was found!\",\n            sum(is.na(flights$manufacturer)))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"For 23400 flights, no plane information was found!\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # l.\n    plane_cols <- c(\"manufacturer\", \"model\")\n    names(flights)[names(flights) %in% plane_cols] <- paste0(\"plane_\", plane_cols)\n    head(flights[,c(\"month\", \"day\", \"dep_time\", \"origin\", \"dest\",\n                    \"tail_num\", \"plane_manufacturer\", \"plane_model\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           month day dep_time origin dest tail_num plane_manufacturer plane_model\n    12392      1   1      517    EWR  IAH   N14228             BOEING     737-824\n    29840      1   1      533    LGA  IAH   N24211             BOEING     737-824\n    101559     1   1      542    JFK  MIA   N619AA             BOEING     757-223\n    59037      1   1      554    EWR  ORD   N39463             BOEING   737-924ER\n    109996     1   1      554    LGA  ATL   N668DN             BOEING     757-232\n    80413      1   1      555    EWR  FLL   N516JB   AIRBUS INDUSTRIE    A320-232\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n2.  The `UCI Adult Income` data set:\n    a. Download the `Adult Income` data set from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/2/adult). It contains socio-economic data on individuals from the 1994 US census. When you download the data from the provided link, you will receive a zip archive that contains five files. Import the file `adult.data` into R using `read.table` and give the resulting `data.frame` the name `income`. Hint: the file can be opened with any text editor to inspect the delimiter and the presence of a header.\n    b. Using the information provided under the link above, give appropriate names to the columns of `income`.\n    c. Have a look at the `head` of some individual columns. What do you notice?\n    d. Additionally to the leading spaces, this data set uses a question mark `?` to indicate missing values. Both of these things would require manual work to handle. Fortunately, the `read.table` function has arguments `strip.white` to remove leading and trailing white space and `na.strings` to specify strings that are to be interpreted as `NA`. Use these two arguments to read `adult.data` into R again, redefining the `income` object you just created. Repeat exercise b. to rename the columns appropriately. Now, inspect the columns to verify that the leading spaces are gone and that the question marks have been turned into `NA`s.\n    e. Verify that the variables in the `data.frame` have the correct data types for the data stored in them. Decide which of the included variables should be turned into a `factor` and go ahead with their transformation.\n    f. A detail on factors left out from the lecture is that there are actually two types of them: unordered and ordered. Unordered factors should be used for nominal scales, while ordered factors should be used for ordinal scales. Turn the `income` variable in the data set into an ordered factor (you can use `as.ordered`) and verify that the two levels are in the correct order by inspecting head `head` of that variable.\n    g. The variable `marital_status` uses three different levels to mean \"married\", namely `Married-AF-spouse`, `Married-civ-spouse` and `Married-spouse-absent`. This distinction is not relevant for us, we want to subsume all of these levels under the category `Married`. To do this, redefine the `factor` for `marital_status` and use the `labels` argument of `factor` function to map all three \"married\"-levels to the level `Married`. Verify that redefining the factor worked by computing the frequency table for the different marital statuses.\n    h. Using appropriate functions in R, answer the following questions:\n        -   What is the average age of individuals broken down by education level?\n        -   Which proportion of men are married broken down by race? (Hint: you can create two-dimensional contingency tables by passing more than one vector into `table` and compute row or column percentages with `prop.table`.)\n        -   How many hours per week do people with a doctorate work on average? Is that the highest average work load of all education levels?\n        -   Which proportion of people whose native country is the US make more than 50k?\n        -   How many people in the data set are black and have a masters or a doctoral degree?\n    \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # a.\n    income <- read.table(\"../data/adult.data\", sep = \",\")\n    \n    # b.\n    names(income) <- c(\"age\", \"workclass\", \"fnlwgt\", \"educ\", \"educ_num\", \"marital_status\",\n                       \"occup\", \"relationship\", \"race\", \"sex\", \"cap_gain\", \"cap_loss\",\n                       \"hrs_per_week\", \"native_country\", \"income\")\n    \n    # c.\n    head(income$workclass)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \" State-gov\"        \" Self-emp-not-inc\" \" Private\"         \n    [4] \" Private\"          \" Private\"          \" Private\"         \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(income$educ)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \" Bachelors\" \" Bachelors\" \" HS-grad\"   \" 11th\"      \" Bachelors\"\n    [6] \" Masters\"  \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(income$race)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \" White\" \" White\" \" White\" \" Black\" \" Black\" \" White\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(income$age)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 39 50 38 53 28 37\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # All data in columns containing categorical data seem to have a leading space \" \".\n    \n    # d.\n    income <- read.table(\"../data/adult.data\", sep = \",\", strip.white = TRUE, na.strings = \"?\")\n    names(income) <- c(\"age\", \"workclass\", \"fnlwgt\", \"educ\", \"educ_num\", \"marital_status\",\n                       \"occup\", \"relationship\", \"race\", \"sex\", \"cap_gain\", \"cap_loss\",\n                       \"hrs_per_week\", \"native_country\", \"income\")\n    head(income$workclass)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"State-gov\"        \"Self-emp-not-inc\" \"Private\"          \"Private\"         \n    [5] \"Private\"          \"Private\"         \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(income$educ)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Bachelors\" \"Bachelors\" \"HS-grad\"   \"11th\"      \"Bachelors\" \"Masters\"  \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # No more leading white space\n    sapply(income, function(x) sum(x == \"?\", na.rm = TRUE)) # No more question marks\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n               age      workclass         fnlwgt           educ       educ_num \n                 0              0              0              0              0 \n    marital_status          occup   relationship           race            sex \n                 0              0              0              0              0 \n          cap_gain       cap_loss   hrs_per_week native_country         income \n                 0              0              0              0              0 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    sapply(income, function(x) sum(is.na(x))) # But now, several NA's in some columns\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n               age      workclass         fnlwgt           educ       educ_num \n                 0           1836              0              0              0 \n    marital_status          occup   relationship           race            sex \n                 0           1843              0              0              0 \n          cap_gain       cap_loss   hrs_per_week native_country         income \n                 0              0              0            583              0 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # e.\n    sapply(income, typeof)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n               age      workclass         fnlwgt           educ       educ_num \n         \"integer\"    \"character\"      \"integer\"    \"character\"      \"integer\" \n    marital_status          occup   relationship           race            sex \n       \"character\"    \"character\"    \"character\"    \"character\"    \"character\" \n          cap_gain       cap_loss   hrs_per_week native_country         income \n         \"integer\"      \"integer\"      \"integer\"    \"character\"    \"character\" \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Factors should be: workclass, educ, marital_status, occup, relationship, race, sex,\n    # native_country and income.\n    income$workclass <- factor(income$workclass)\n    income$educ <- factor(income$educ)\n    income$marital_status <- factor(income$marital_status)\n    income$occup <- factor(income$occup)\n    income$relationship <- factor(income$relationship)\n    income$race <- factor(income$race)\n    income$sex <- factor(income$sex)\n    income$native_country <- factor(income$native_country)\n    income$income <- factor(income$income)\n    \n    # f.\n    income$income <- as.ordered(income$income)\n    head(income$income) # Correct order! Note the \"<\" sign between the factor levels.\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] <=50K <=50K <=50K <=50K <=50K <=50K\n    Levels: <=50K < >50K\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # g.\n    income$marital_status <- factor(income$marital_status,\n                                    labels = c(\"Divorced\", \"Married\", \"Married\", \"Married\",\n                                               \"Never-married\", \"Separated\", \"Widowed\"))\n    table(income$marital_status)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n         Divorced       Married Never-married     Separated       Widowed \n             4443         15417         10683          1025           993 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # h.\n    tapply(income$age, income$educ, mean)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n            10th         11th         12th      1st-4th      5th-6th      7th-8th \n        37.42980     32.35574     32.00000     46.14286     42.88589     48.44582 \n             9th   Assoc-acdm    Assoc-voc    Bachelors    Doctorate      HS-grad \n        41.06031     37.38144     38.55355     38.90495     47.70218     38.97448 \n         Masters    Preschool  Prof-school Some-college \n        44.04991     42.76471     44.74653     35.75627 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    prop.table(table(income$marital_status == \"Married\", income$race), margin = 2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n           \n            Amer-Indian-Eskimo Asian-Pac-Islander     Black     Other     White\n      FALSE          0.5980707          0.4716073 0.7119078 0.5571956 0.5066508\n      TRUE           0.4019293          0.5283927 0.2880922 0.4428044 0.4933492\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    mean(income$hrs_per_week[income$educ == \"Doctorate\"])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 46.97337\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    sort(tapply(income$hrs_per_week, income$educ, mean), decreasing = TRUE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     Prof-school    Doctorate      Masters    Bachelors    Assoc-voc      HS-grad \n        47.42535     46.97337     43.83633     42.61401     41.61071     40.57537 \n      Assoc-acdm      7th-8th      5th-6th Some-college      1st-4th          9th \n        40.50422     39.36687     38.89790     38.85228     38.25595     38.04475 \n            10th    Preschool         12th         11th \n        37.05252     36.64706     35.78060     33.92596 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # No, Professors work even more hours per week on average (47.42 vs. 46.97)\n    \n    prop.table(table(income$income[income$native_country == \"United-States\"]))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n        <=50K      >50K \n    0.7541652 0.2458348 \n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    nrow(subset(income, race == \"Black\" & (educ == \"Masters\" | educ == \"Doctorate\")))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 97\n    ```\n    \n    \n    :::\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}