{
  "hash": "0dfc7d9406f5c94bb40f1625d8b556fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercises I\"\nsubtitle: \"Data Science and Data Analytics\"\nauthor: \"Julian Amon, PhD\"\ndate: \"March 21, 2025\"\ndate-format: long\nformat: html\nhighlight-style: arrow\nexecute: \n  warning: true\n  echo: false\n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# The essentials of R programming\n\n\n\n\n\n\n\n\n\n\n1.  What is the sum of the first 100 positive integers? The formula for the sum of integers 1 through $n$ is $n(n+1)/2$. Define $n = 100$ and then use R to compute the sum of 1 through 100 using the formula. What is the sum?\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n2.  Now use the same formula to compute the sum of the integers from 1 through 1000.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n3.  Choose any positive number and assign it to a variable named `x`. Then perform the following steps all in one line of R code:\n    -   Add 2 to `x`.\n    -   Multiply the result by 3.\n    -   Subtract 6 from the answer.\n    -   Divide what you get by 3.\n    -   Compute the logarithm in base 2 of the number you get in Step 4.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n4.  Now, write a function called `f` that performs the five steps outlined in exercise 3 for any given input `x`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n5.  Assign the value 3 to a variable named `x`, the value 4 to a variable named `y` and the value 5 to a variable named `z`. `x`, `y` and `z` form what is a called a [Pythagorean Triple](https://en.wikipedia.org/wiki/Pythagorean_triple), i.e. they are integers that satisfy the Pythagoras Theorem $x^2 + y^2 = z^2$. Verify that this is true with R.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n6.  Simulate 100 flips of a fair coin. Hint: use the function `sample` in conjunction with a character vector indicating the possible outcomes of a coin flip (i.e. \"heads\" and \"tails\"). Call the function multiple times to see that the outcome appears random.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n7.  What are the data types of the following objects? If in doubt, determine them using `typeof`.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x1 <- 10\n    x2 <- \"10\"\n    x3 <- (10 > 10)\n    x4 <- \"ten\"\n    x5 <- 10L\n    ```\n    :::\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n8.  In the following code block, try to predict the output of each individual line. Then run the code in R to see if you were right.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- 5 > 3\n    is.logical(x)\n    is.logical(!x)\n    !is.logical(x)\n    !is.logical(!x)\n    ```\n    :::\n\n\n\n\n9.  Create a vector called `some_thing` containing your first name, your age and whether or not you like ice cream (TRUE vs. FALSE). Can you predict the data type of the resulting vector? Verify using R.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n10. Using the functions `seq` and `rep` as needed, create the vectors\n    \n    `0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4`\n    \n    and\n    \n    `1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5`\n    \n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n11. Using the functions `seq` and `rep` as needed, create the vector\n    \n    `1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9`\n    \n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n12. Write a function which outputs whether a given number is positive or negative.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n\n13. Write a function which, for a given natural number $n$, returns a sequence where each $i \\leq n$ is repeated $i$ times, in ascending order. For example, for $n = 4$, the function should return `1 2 2 3 3 3 4 4 4 4`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n14. Write a function which outputs which of two given character strings is shorter. Hint: use the function `nchar`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n15. Write a function which takes three numbers as arguments and returns the sum of the squares of the two larger numbers.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n16. Write a function that for a given character vector, extracts all those that contain only lower-case letters, i.e. for the input `c(\"a\", \"ab, \"abC\")`, it should return `\"a\" \"ab\"`. Hint: use the function `tolower`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n17. Create two vectors, one called `heights` containing the values 176, 178 and 156, and another called `names` containing the values \"Anna\", \"Jakob\" and \"Lisa\". Use `cbind` to combine these vectors into a matrix called `m`. What will be the data type of that matrix and why? Why is a matrix not a good data structure to store `heights` and `names` together? What would be a better alternative?\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n18. Create three vectors, one called `state` containing the values \"Vorarlberg\", \"Tyrol\", \"Salzburg\", \"Upper Austria\", \"Lower Austria\", \"Carinthia\", \"Styria\", \"Burgenland\" and \"Vienna\", one called `population` containing the values 402, 764, 561, 1505, 1699, 565, 1253, 298 and 1932, and one called `area` containing the values 2602, 12648, 7155, 11983, 19180, 9537, 16399, 3965 and 415. Create a list whose elements are these three vectors. Name the list elements in accordance with the variable names. Turn this list into a `data.frame` called `state_df`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n19. The `data.frame` from exercise 18 contains the population (in thousands) and the area (in square kilometres) of all nine Austrian federal states. Use it to perform the following tasks:\n    -   Obtain the population of Upper Austria using numerical indexing of the `data.frame`.\n    -   Obtain the area of Carinthia using logical indexing for the row and character-based indexing for the column of the `data.frame`.\n    -   Add a new column called `density` to the `data.frame`, which holds the population densities of the nine states in number of people per square kilometre.\n    -   Use the `$` operator and numerical subsetting to get the population density of Vienna.\n    -   Obtain the row of the `data.frame` that holds all information of the state with the lowest population density.\n    -   Use the `order` function to sort the `data.frame` by population in descending order.\n    -   Set the rownames of the `data.frame` equal to the `state` variable and then remove this variable from the `data.frame`.\n    \n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n20. Using `lapply` and the `data.frame` from the previous exercise, find the (unweighted) average population, area and population density of the nine Austrian federal states. Hint: use the function `mean`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n21. Write a function called `compute_s_n`, which, for a given $n$ computes the sum $S_n = 1^2 + 2^2 + 3^2 + \\ldots + n^2$. Report the value of the sum for $n = 10$.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n22. Using the function `numeric`, instantiate an empty numeric vector called `s_n` of length 25. Now, using a `for` loop and the function `compute_s_n` from the previous exercise, store in `s_n` the results of $S_1, S_2, \\ldots, S_{25}$.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n23. Repeat exercise 22 using a `while` loop instead.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n24. Repeat exercise 22 using `lapply` instead. Hint: to turn the list output of `lapply` into an atomic vector, have a look at the function `unlist`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n\n\n\n\n20. Write a function called `find_weekday`, which takes as input a character string representing a date in `DD.MM.YYYY` format, and serves as output the weekday that this particular date was. Use it to find out on which day of the week you were born.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n\n\n\n\n\n\n\n\n21. Install and load the package `ggplot2`.\n\n\n\n\n    ::: {.cell}\n    \n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}